author: JeffreyWilkinson
core-version: >=5.1.11
created: 20160218191911640
dependents: 
description: Markdown Like Wikitext Extension
list: readme license
modified: 20160218191912766
plugin-type: plugin
source: https://github.com/buggyj/Tw5-tools
title: $:/plugins/bj/plugins/markdownlike
type: application/json
version: 0.0.1

{
    "tiddlers": {
        "MDL": {
            "created": "20160215120312455",
            "modified": "20160216160312656",
            "tags": "md+",
            "title": "MDL",
            "type": "application/json",
            "text": "{\n  \"parserrules\": {\n    \"pragmaRuleList\": [\n      \"macrodef\",\n      \"rules\"\n    ],\n    \"blockRuleList\": [\n      \"codeblock\",\n      \"commentblock\",\n      \"filteredtranscludeblock\",\n      \"headingmod\",\n      \"horizrule\",\n      \"html\",\n      \"listdigit\",\n      \"listmod\",\n      \"macrocallblock\",\n      \"quoteblock\",\n      \"styleblock\",\n      \"table\",\n      \"transcludeblock\",\n      \"typedblock\"\n    ],\n    \"inlineRuleList\": [\n      \"boldmod\",\n      \"codeinline\",\n      \"commentinline\",\n      \"dash\",\n      \"emphasis\",\n      \"entity\",\n      \"extlink\",\n      \"filteredtranscludeinline\",\n      \"hardlinebreaks\",\n      \"html\",\n      \"italic\",\n      \"macrocallinline\",\n      \"prettylink\",\n      \"strikethrough\",\n      \"styleinline\",\n      \"subscript\",\n      \"superscript\",\n      \"transcludeinline\",\n      \"underscore\",\n      \"wikilink\"\n    ]\n  },\n  \"baserules\": \"\"\n}\n"
        },
        "$:/bj/mdl/license": {
            "title": "$:/bj/mdl/license",
            "text": "The MIT License (MIT)\n\nCopyright (c) 2014 Jeffrey Wikinson aka buggyj\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        "$:/language/Docs/Types/text/vnd.twbase;flexibility=MDL": {
            "description": "markdown like",
            "group": "Text",
            "name": "text/vnd.twbase;flexibility=MDL",
            "title": "$:/language/Docs/Types/text/vnd.twbase;flexibility=MDL",
            "type": "text/vnd.tiddlywiki",
            "text": ""
        },
        "$:/bj/mdl/modules/parsers/wikiparser/rules/bold.js": {
            "text": "/*\\\ntitle: $:/bj/mdl/modules/parsers/wikiparser/rules/bold.js\ntype: application/javascript\nmodule-type: wikirule\n\nWiki text inline rule for emphasis - bold. For example:\n\n```\n\tThis is ''bold'' text\n```\n\nThis wikiparser can be modified using the rules eg:\n\n```\n\\rules except bold \n\\rules only bold \n```\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nexports.name = \"boldmod\";\nexports.types = {user: true};\n\nexports.init = function(parser) {\n\tthis.parser = parser;\n\t// Regexp to match\n\tthis.matchRegExp = /\\*\\*/mg;\n};\n\nexports.parse = function() {\n\t// Move past the match\n\tthis.parser.pos = this.matchRegExp.lastIndex;\n\n\t// Parse the run including the terminator\n\tvar tree = this.parser.parseInlineRun(/\\*\\*/mg,{eatTerminator: true});\n\n\t// Return the classed span\n\treturn [{\n\t\ttype: \"element\",\n\t\ttag: \"strong\",\n\t\tchildren: tree\n\t}];\n};\n\n})();\n",
            "title": "$:/bj/mdl/modules/parsers/wikiparser/rules/bold.js",
            "type": "application/javascript",
            "module-type": "wikirule"
        },
        "$:/bj/mdl/modules/parsers/wikiparser/rules/heading.js": {
            "text": "/*\\\ntitle: $:/bj/mdl/modules/parsers/wikiparser/rules/heading.js\ntype: application/javascript\nmodule-type: wikirule\n\nWiki text block rule for headings\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nexports.name = \"headingmod\";\nexports.types = {user: true};\n\nexports.init = function(parser) {\n\tthis.parser = parser;\n\t// Regexp to match\n\tthis.matchRegExp = /(#{1,6})/mg;\n};\n\n/*\nParse the most recent match\n*/\nexports.parse = function() {\n\t// Get all the details of the match\n\tvar headingLevel = this.match[1].length;\n\t// Move past the !s\n\tthis.parser.pos = this.matchRegExp.lastIndex;\n\t// Parse any classes, whitespace and then the heading itself\n\tvar classes = this.parser.parseClasses();\n\tthis.parser.skipWhitespace({treatNewlinesAsNonWhitespace: true});\n\tvar tree = this.parser.parseInlineRun(/(\\r?\\n)/mg);\n\t// Return the heading\n\treturn [{\n\t\ttype: \"element\",\n\t\ttag: \"h\" + headingLevel, \n\t\tattributes: {\n\t\t\t\"class\": {type: \"string\", value: classes.join(\" \")}\n\t\t},\n\t\tchildren: tree\n\t}];\n};\n})();\n",
            "title": "$:/bj/mdl/modules/parsers/wikiparser/rules/heading.js",
            "type": "application/javascript",
            "module-type": "wikirule"
        },
        "$:/bj/mdl/modules/parsers/wikiparser/rules/list.js": {
            "text": "/*\\\ntitle: $:/bj/mdl/modules/parsers/wikiparser/rules/list.js\ntype: application/javascript\nmodule-type: wikirule\n\nWiki text block rule for lists. For example:\n\n```\n* This is an unordered list\n* It has two items\n\n# This is a numbered list\n## With a subitem\n# And a third item\n\n; This is a term that is being defined\n: This is the definition of that term\n```\n\nNote that lists can be nested arbitrarily:\n\n```\n#** One\n#* Two\n#** Three\n#**** Four\n#**# Five\n#**## Six\n## Seven\n### Eight\n## Nine\n```\n\nA CSS class can be applied to a list item as follows:\n\n```\n* List item one\n*.active List item two has the class `active`\n* List item three\n```\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nexports.name = \"listmod\";\nexports.types = {user: true};\n\nexports.init = function(parser) {\n\tthis.parser = parser;\n\t// Regexp to match\n\tthis.matchRegExp = /([\\+\\.;:>]+)/mg;\n};\n\nvar listTypes = {\n\t\"+\": {listTag: \"ul\", itemTag: \"li\"},\n\t\".\": {listTag: \"ol\", itemTag: \"li\"},\n\t\";\": {listTag: \"dl\", itemTag: \"dt\"},\n\t\":\": {listTag: \"dl\", itemTag: \"dd\"},\n\t\">\": {listTag: \"blockquote\", itemTag: \"p\"}\n};\n\n/*\nParse the most recent match\n*/\nexports.parse = function() {\n\t// Array of parse tree nodes for the previous row of the list\n\tvar listStack = [];\n\t// Cycle through the items in the list\n\twhile(true) {\n\t\t// Match the list marker\n\t\tvar reMatch = /([\\+\\.;:>]+)/mg;\n\t\treMatch.lastIndex = this.parser.pos;\n\t\tvar match = reMatch.exec(this.parser.source);\n\t\tif(!match || match.index !== this.parser.pos) {\n\t\t\tbreak;\n\t\t}\n\t\t// Check whether the list type of the top level matches\n\t\tvar listInfo = listTypes[match[0].charAt(0)];\n\t\tif(listStack.length > 0 && listStack[0].tag !== listInfo.listTag) {\n\t\t\tbreak;\n\t\t}\n\t\t// Move past the list marker\n\t\tthis.parser.pos = match.index + match[0].length;\n\t\t// Walk through the list markers for the current row\n\t\tfor(var t=0; t<match[0].length; t++) {\n\t\t\tlistInfo = listTypes[match[0].charAt(t)];\n\t\t\t// Remove any stacked up element if we can't re-use it because the list type doesn't match\n\t\t\tif(listStack.length > t && listStack[t].tag !== listInfo.listTag) {\n\t\t\t\tlistStack.splice(t,listStack.length - t);\n\t\t\t}\n\t\t\t// Construct the list element or reuse the previous one at this level\n\t\t\tif(listStack.length <= t) {\n\t\t\t\tvar listElement = {type: \"element\", tag: listInfo.listTag, children: [\n\t\t\t\t\t{type: \"element\", tag: listInfo.itemTag, children: []}\n\t\t\t\t]};\n\t\t\t\t// Link this list element into the last child item of the parent list item\n\t\t\t\tif(t) {\n\t\t\t\t\tvar prevListItem = listStack[t-1].children[listStack[t-1].children.length-1];\n\t\t\t\t\tprevListItem.children.push(listElement);\n\t\t\t\t}\n\t\t\t\t// Save this element in the stack\n\t\t\t\tlistStack[t] = listElement;\n\t\t\t} else if(t === (match[0].length - 1)) {\n\t\t\t\tlistStack[t].children.push({type: \"element\", tag: listInfo.itemTag, children: []});\n\t\t\t}\n\t\t}\n\t\tif(listStack.length > match[0].length) {\n\t\t\tlistStack.splice(match[0].length,listStack.length - match[0].length);\n\t\t}\n\t\t// Process the body of the list item into the last list item\n\t\tvar lastListChildren = listStack[listStack.length-1].children,\n\t\t\tlastListItem = lastListChildren[lastListChildren.length-1],\n\t\t\tclasses = this.parser.parseClasses();\n\t\tthis.parser.skipWhitespace({treatNewlinesAsNonWhitespace: true});\n\t\tvar tree = this.parser.parseInlineRun(/(\\r?\\n)/mg);\n\t\tlastListItem.children.push.apply(lastListItem.children,tree);\n\t\tif(classes.length > 0) {\n\t\t\t$tw.utils.addClassToParseTreeNode(lastListItem,classes.join(\" \"));\n\t\t}\n\t\t// Consume any whitespace following the list item\n\t\tthis.parser.skipWhitespace();\n\t}\n\t// Return the root element of the list\n\treturn [listStack[0]];\n};\n\n})();\n",
            "title": "$:/bj/mdl/modules/parsers/wikiparser/rules/list.js",
            "type": "application/javascript",
            "module-type": "wikirule"
        },
        "$:/bj/mdl/modules/parsers/wikiparser/rules/listdigit.js": {
            "text": "/*\\\ntitle: $:/bj/mdl/modules/parsers/wikiparser/rules/listdigit.js\ntype: application/javascript\nmodule-type: wikirule\n\nWiki text block rule for lists. For example:\n\n```\n* This is an unordered list\n* It has two items\n\n# This is a numbered list\n## With a subitem\n# And a third item\n\n; This is a term that is being defined\n: This is the definition of that term\n```\n\nNote that lists can be nested arbitrarily:\n\n```\n#** One\n#* Two\n#** Three\n#**** Four\n#**# Five\n#**## Six\n## Seven\n### Eight\n## Nine\n```\n\nA CSS class can be applied to a list item as follows:\n\n```\n* List item one\n*.active List item two has the class `active`\n* List item three\n```\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nexports.name = \"listdigit\";\nexports.types = {user: true};\n\nexports.init = function(parser) {\n\tthis.parser = parser;\n\t// Regexp to match\n\tthis.matchRegExp = /([0-9]\\.)/mg;\n};\n\nvar listTypes = {\n\n\t\"0\": {listTag: \"ol\", itemTag: \"li\"},\n\t\"1\": {listTag: \"ol\", itemTag: \"li\"},\n\t\"2\": {listTag: \"ol\", itemTag: \"li\"},\n\t\"3\": {listTag: \"ol\", itemTag: \"li\"},\n\t\"4\": {listTag: \"ol\", itemTag: \"li\"},\n\t\"5\": {listTag: \"ol\", itemTag: \"li\"},\n\t\"6\": {listTag: \"ol\", itemTag: \"li\"},\n\t\"7\": {listTag: \"ol\", itemTag: \"li\"},\n\t\"8\": {listTag: \"ol\", itemTag: \"li\"},\n\t\"9\": {listTag: \"ol\", itemTag: \"li\"}\n\n};\n\n/*\nParse the most recent match\n*/\nexports.parse = function() {\n\t// Array of parse tree nodes for the previous row of the list\n\tvar listStack = [];\n\t// Cycle through the items in the list\n\t//bj hack length\n\tvar mlength = 1;\n\twhile(true) {\n\t\t// Match the list marker\n\t\tvar reMatch = /([0-9]\\.)/mg;\n\t\treMatch.lastIndex = this.parser.pos;\n\t\tvar match = reMatch.exec(this.parser.source);\n\t\tif(!match || match.index !== this.parser.pos) {\n\t\t\tbreak;\n\t\t}\n\t\t// Check whether the list type of the top level matches\n\t\tvar listInfo = listTypes[match[0].charAt(0)];\n\t\tif(listStack.length > 0 && listStack[0].tag !== listInfo.listTag) {\n\t\t\tbreak;\n\t\t}\n\t\t// Move past the list marker\n\t\tthis.parser.pos = match.index + match[0].length;\n\t\t// Walk through the list markers for the current row\n\t\tfor(var t=0; t<1; t++) {\n\t\t\tlistInfo = listTypes[match[0].charAt(t)];\n\t\t\t// Remove any stacked up element if we can't re-use it because the list type doesn't match\n\t\t\tif(listStack.length > t && listStack[t].tag !== listInfo.listTag) {\n\t\t\t\tlistStack.splice(t,listStack.length - t);\n\t\t\t}\n\t\t\t// Construct the list element or reuse the previous one at this level\n\t\t\tif(listStack.length <= t) {\n\t\t\t\tvar listElement = {type: \"element\", tag: listInfo.listTag, children: [\n\t\t\t\t\t{type: \"element\", tag: listInfo.itemTag, children: []}\n\t\t\t\t]};\n\t\t\t\t// Link this list element into the last child item of the parent list item\n\t\t\t\tif(t) {\n\t\t\t\t\tvar prevListItem = listStack[t-1].children[listStack[t-1].children.length-1];\n\t\t\t\t\tprevListItem.children.push(listElement);\n\t\t\t\t}\n\t\t\t\t// Save this element in the stack\n\t\t\t\tlistStack[t] = listElement;\n\t\t\t} else if(t === (mlength - 1)) {\n\t\t\t\tlistStack[t].children.push({type: \"element\", tag: listInfo.itemTag, children: []});\n\t\t\t}\n\t\t}\n\t\tif(listStack.length > mlength) {\n\t\t\tlistStack.splice(mlength,listStack.length - mlength);\n\t\t}\n\t\t// Process the body of the list item into the last list item\n\t\tvar lastListChildren = listStack[listStack.length-1].children,\n\t\t\tlastListItem = lastListChildren[lastListChildren.length-1],\n\t\t\tclasses = this.parser.parseClasses();\n\t\tthis.parser.skipWhitespace({treatNewlinesAsNonWhitespace: true});\n\t\tvar tree = this.parser.parseInlineRun(/(\\r?\\n)/mg);\n\t\tlastListItem.children.push.apply(lastListItem.children,tree);\n\t\tif(classes.length > 0) {\n\t\t\t$tw.utils.addClassToParseTreeNode(lastListItem,classes.join(\" \"));\n\t\t}\n\t\t// Consume any whitespace following the list item\n\t\tthis.parser.skipWhitespace();\n\t}\n\t// Return the root element of the list\n\treturn [listStack[0]];\n};\n\n})();\n",
            "title": "$:/bj/mdl/modules/parsers/wikiparser/rules/listdigit.js",
            "type": "application/javascript",
            "module-type": "wikirule"
        },
        "$:/bj/mdl/readme": {
            "title": "$:/bj/mdl/readme",
            "text": "```\n# Source of content made to be even more markdown like\nIn this content I have made the following changes to the rules\n\none level of markdow number lists now supported\n\n1. using **listmod rule** - now I am using a  . for ordered lists\n2. using **headingmod rule** I am using # inplace of ! for headings\n3. using **boldmode rule** I am using two * inplace of two '\n\nI have also:\n\n+ **replaced** * with + for unordered lists\n```\n# Source of content made to be even more markdown like\nIn this content I have made the following changes to the rules\n\none level of markdow number lists now supported\n\n1. using **listmod rule** - now I am using a  . for ordered lists\n2. using **headingmod rule** I am using # inplace of ! for headings\n3. using **boldmode rule** I am using two * inplace of two '\n##\nI have also:\n\n+ **replaced** * with + for unordered lists\n"
        }
    }
}