author: Jeffrey Wilkinson (aka BJ)
core-version: >=5.1.10
created: 20160217140057116
dependents: 
description: include web content
modified: 20160226214334073
plugin-type: plugin
source: https://github.com/buggyj/tiddlyclip-plugin
title: $:/plugins/bj/tiddlyclip
type: application/json
version: 0.0.8-alpha

{
    "tiddlers": {
        "SnapRuleMode": {
            "title": "SnapRuleMode",
            "type": "text/vnd.tiddlywiki",
            "text": "[{\"#nosnap\":\"nosave\"\t},{\"#newdata\":\"((*!@exists(@snap)*??*#nosnap*)) inc add\"}]\n"
        },
        "TiddlyClipConfig": {
            "title": "TiddlyClipConfig",
            "type": "text/vnd.tiddlywiki",
            "text": "!default\n|!Category|!Tip|!Tags|!Rule Tid|!Modes|\n|Tid|copy tids||[[defaultTid]]|tiddlers|\n|Snip|copy||[[defaultSnip]]||\n|Pin|pin it||[[defaultPin]]||\n"
        },
        "$:/config/EditorTypeMappings/application/json": {
            "title": "$:/config/EditorTypeMappings/application/json",
            "text": "json\n"
        },
        "$:/plugins/bj/tiddlyclip/ui/Buttons/tiddlyclip": {
            "title": "$:/plugins/bj/tiddlyclip/ui/Buttons/tiddlyclip",
            "tags": "$:/tags/PageControls",
            "caption": "Clip Content",
            "description": "configure tiddlyclip",
            "text": "<$button to=\"TiddlyClipConfig\" title=\"top  clip table\" aria-label=\"top  clip table\" class=<<tv-config-toolbar-class>>>\n<$list filter=\"[<tv-config-toolbar-icons>prefix[yes]]\">\n{{$:/plugins/bj/tiddlyclip/icon}}\n</$list>\n<$list filter=\"[<tv-config-toolbar-text>prefix[yes]]\">\n<$text text=\"top  clip table\"/>\n</$list>\n</$button>\n"
        },
        "$:/plugins/bj/tiddlyclip/icon": {
            "tags": "$:/tags/Image",
            "title": "$:/plugins/bj/tiddlyclip/icon",
            "type": "text/vnd.tiddlywiki",
            "text": "\n<svg  class=\"tc-image-import-button tc-image-button\"  preserveAspectRatio=\"none\"\n width=\"22pt\" height=\"22pt\" viewBox=\"0 0 32 28\"\n  >  \n   <g\n     transform=\"matrix(0.06516688,0,0,0.08453159,-13.159611,-17.662411)\"\n     id=\"layer1\"\n     style=\"fill:#241f1c\">\n    <path\n       d=\"m 557.14285,368.07648 a 142.85715,150 0 1 1 -285.71429,0 142.85715,150 0 1 1 285.71429,0 z\"\n       id=\"path3010\"\n       style=\"fill:#241f1c;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\" />\n  </g>\n  <g\n     transform=\"matrix(0.08280307,-0.10351736,0.08103997,0.10535593,3.3717294,13.619584)\"\n     id=\"g3460\"\n     style=\"fill:#ffffff;fill-rule:evenodd\">\n    <path\n       d=\"m 105.44944,94.213895 c 0,0 4.60002,-0.02418 4.60002,5.188716 0,5.212899 -4.88621,5.212899 -4.88621,5.212899 l -60.155743,0.54232 c 0,0 -44.6399752,1.13201 -44.63997463,-38.512909 C 0.36753293,27 45.042825,27 45.042825,27 l 60.489665,0 c 0,0 33.46425,-1.326501 33.46425,28.177187 0,29.503688 -33.26964,27.668566 -33.26964,27.668566 l -49.553591,0 c 0,0 -33.483586,2.304269 -33.483586,-16.754378 0,-19.058647 33.483586,-16.753074 33.483586,-16.753074 l 49.553591,0 c 0,0 5.51811,10e-7 5.51811,5.484811 0,5.484809 -5.51811,5.68434 -5.51811,5.68434 l -49.553591,0 c 0,0 -18.684379,10e-7 -18.684379,6.137467 0,6.137467 18.684379,5.031683 18.684379,5.031683 l 49.553591,10e-7 c 0,0 22.10845,1.464544 22.10845,-16.499416 0,-19.646785 -22.10845,-16.873655 -22.10845,-16.873655 l -60.684275,0 c 0,0 -33.514097,-10e-7 -33.514097,28.341389 0,28.341389 33.514096,27.313047 33.514096,27.313047 l 60.406616,0.255927 z\"\n       transform=\"matrix(0.70710678,-0.70710678,0.70710678,0.70710678,-26.351768,68.381205)\"\n       id=\"path3462\"\n       style=\"fill:#ffffff\" />\n\n\n  </g>\n</svg>\n"
        },
        "$:/plugins/bj/tiddlyclip/tidpaste.js": {
            "type": "application/javascript",
            "title": "$:/plugins/bj/tiddlyclip/tidpaste.js",
            "module-type": "library",
            "text": "\ntiddlyclip={hello:\"hello\"};\n\n(function(){\ntiddlyclip.modules={};\n\nvar log = function (x) {\n\talert(x);\n}\n\tfunction status (param) {\n\t\ttiddlyclip.log(param);\n\t\t}\n\nif (true) {\n\ntiddlyclip.modules.tPaste = (function () {\n\n\tvar api = \n\t{\n\t\tonLoad:onLoad,\t\t\t\tpaste:paste,\t\t\t\t\n\t\thasMode:hasMode,\t\t\t\n\t\thasModeBegining:hasModeBegining\n\t};\n\tvar   tiddlerObj, twobj,   defaults;\n\n\tfunction onLoad() {\n\t\ttiddlerAPI \t= tiddlyclip.modules.tiddlerAPI;\n\t\ttwobj\t\t= tiddlyclip.modules.twobj;\n\t\tdefaults\t= tiddlyclip.modules.defaults;\n\t}\n/////////////////////////////////////////////////////////////////////////////\n\tfunction findDefaultRule(rule) {\n\t\treturn (rule.substring(0,7)==='default') ? defaults.getDefaultRule(rule):null;\n\t}\n\n\tfunction findCategory (tableOfCats, category) {\t\n\t\tvar categoryRows = tableOfCats.split(\"\\n\");\n\t\tvar cat = {}, tagsAndModes, pieces, catFound=false;\n\t\tvar hasExt = false;\n\t\t\n\t\tfor (var i=0; i<categoryRows.length; i++) { \n\t\t\tpieces = categoryRows[i].split(\"|\");// row is = |Category|Tip|Tags|Rules Tid|Modes|\n\t\t\tif (pieces.length==1) continue; \t//ingore blanklines\n\t\t\tif (pieces.length < 7) {\n\t\t\t\talert('config table format error no of row incorrect '+categoryRows[i]);\n\t\t\t\t return {valid:false};\n\t\t\t}\n\t\t\tif (pieces[1].substring(0,1)==='!') continue; //first row is column headings\n\t\t\tif (category == pieces[1]) {\n\t\t\t\tcatFound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} //loop end\n\t\t\n\t\tif (!catFound) {status (\"not found cat: \"+category);return {valid:false};}\n\t\t\n\t\tvar ruleDefs =  twobj.getTidContents(pieces[4].replace(/^\\[\\[([\\s\\S]*)\\]\\]/,\"$1\"));//remove wikiword parens if present\n\t\t//if rule is not found use the default rules\n\t\tif (!ruleDefs) {\n\t\t\tstatus (\"rules not found for cat: \"+category+\" was \"+pieces[4]);\n\t\t\truleDefs = findDefaultRule(pieces[4]);\n\t\t\t\n\t\t\t}\n\t\tif (!!ruleDefs)  {\t\n\t\t\ttry {\n\t\t\t\tcat = {rules:null,valid:false};\t\t\n\t\t\t\tcat.rules=addSequenceOfRules(ruleDefs,category);//one or more\n\t\t\t\tcat.modes= extractModes(pieces[5]);\n\t\t\t\tcat.tags = pieces[3];\n\t\t\t\tcat.tip  = pieces[2];\n\t\t\t\tcat.valid= true;\n\t\t\t\tstatus(\"found cat: \"+category)\n\t\t\t\treturn cat;\n\t\t\t} catch(e) {\n\t\t\t\tstatus(\"caught error while adding rules for cat: \" + category);\n\t\t\t\treturn {valid:false};\n\t\t\t}\n\t\t}\n\t\tstatus (\"rules not found for cat: \"+category);\n\t\treturn {valid:false}; \n\t}\n\n\tfunction findSection(activeSection,configTable) {\n        var sectionStrgs;\n\t\tvar content = configTable;\n\t\tif (content != null) {\n\t\t\tsectionStrgs = content.split(defaults.getDefs().FOLDSTART+'['); //sections begin with a title, , followed by a table of categories\n\t\t\tif(sectionStrgs.length>1) {\n\t\t\t\tstatus(\"found clip list format config\")\t\t \n\t\t\t\tsectionStrgs.shift();\t\n\t\t\t\t//only load active categories \n\t\t\t\treturn (sectionStrgs[activeSection].split('!/%%/\\n')[1]);//strip of section name from first line\n\t\t\t} else { \n\t\t\t\tstatus(\"found straight config format\");\n\t\t\t\tsectionStrgs = content.split('\\n!'); //sections begin with a title, eg !mysection, followed by a table of categories\n\t\t\t\t//only load active categories\n\t\t\t\treturn (sectionStrgs[activeSection].replace(/(^\\|)*\\n/,''));//strip of section name from first line\n\t\t\t}\n\n\t\t}else {\n\t\t\tstatus(\"config tiddler not found try with default values\");\n\t\t\treturn defaults.getDefaultCategories().join(\"\\n\");\n\t\t}\n\t}\n//////////////////////////////////////////////////////////\n\tfunction extractModes(tagString) {\n\t\tvar modes =[], tList = tagString.split(' ');\n\t\tfor (var i=0; i< tList.length; i++) {\n\t\t\tmodes[i] = tList[i].trim();\n\t\t}\n\t\treturn modes;\n\t}\n\n\tfunction hasMode (cat,mode) {\n\t\t\tif (!cat.modes) return false;\n\t\tfor (var i=0; i< cat.modes.length;i++)\n\t\t\tif (mode === cat.modes[i]) return true;\n\t\treturn false;\n\t}\n\tfunction hasModeBegining (cat,mode) {\n\t\t\tif (!cat.modes) return false;\n\t\tfor (var i=0; i< cat.modes.length;i++)\n\t\t\tif (mode === cat.modes[i].substr(0,mode.length)) return true;\n\t\treturn false;\n\t}\n//////////////////////////////////////\t\t\n\tfunction addSequenceOfRules(tiddler,cat) { \t\t\n\t\tvar ruleDefs = tiddler.trim().split(\"\\n\");\n\t\tvar arrayOfRules =[];\n\t\tvar firstRow=0,firstrule=0;\n/*\n        if (ruleDefs[firstRow].substring(0,2)==='|!') firstRow += 1;// row  maybe column titles, ie the string |!Title|!Body|!Tags|!Modes|\n\t\tfor (var i=firstrule,j=firstRow; j<ruleDefs.length; i++,j++) {\n\t\t\tarrayOfRules[i]=new Rule(ruleDefs[j]);\n\t\t}\n*/\n\t\tvar j = 0;\n\t\tfor (var i = 0;i < ruleDefs.length;i++) {\n\t\t\t if (ruleDefs[i].charAt(0) !== \"|\" || ruleDefs[i].charAt(1) === \"!\") continue;//row maybe column titles, ie the string |!Title|!Body|!Tags|!Modes| or a comment\n\t\t\t arrayOfRules[j]=new Rule(ruleDefs[i]);\n\t\t\t j++;\n\t\t}\n\n\t\treturn arrayOfRules;\n\t}\n\n\tfunction Rule(defRule, modes) {\n\t\t//INPUT DEF:\n\t\t//defRule is a string of the form '|Title|Body|Tags|Fields|Init values|Modes|' or a struture {\ttitle:'..', body:'..', tags:'..'}\n\t\t//extracts subst patterns for title, body, tags. Also extracts modes\n\t\tvar Tid;\n\t\tvar whiteSpace = /^\\s+|\\s+$/g;//use trim\n\t\tvar isLinked = /^\\[\\[([\\s|\\S]*)\\]\\]$/;\n\t\tif ((typeof defRule) =='string' ) { //we has a row definition\n\t\t\t//remove triple quotes around any | - these were needed to stop TW thinking they were table elements\n\t\t\tvar pieces = defRule.replace(/\\\"\\\"\\\"\\|\\\"\\\"\\\"/g,\"&bar;\").split(\"|\");\n\t\t\tif  (pieces.length <7) {error('short:'+defRule);throw new Error('Invalid Rule');} //error malformeed TODO: inform the user\n\t\t\tfor (var i=1;i<7;i++) {\n\t\t\t\tpieces[i]= pieces[i].replace(\"&bar;\",\"|\"); \n\t\t\t\tif (pieces[i] == null) {\n\t\t\t\t\tif (i==1) throw new Error('Invlid Rule');//must define a name for the tid\n\t\t\t\t} else \tif (i!=3 && isLinked.test(pieces[i])) { // -there is a definition in a seperated tiddler - go get it\n\t\t\t\t    var temp=pieces[i].replace (/^\\[\\[([\\s|\\S]*)\\]\\]$/,\"$1\"); //remove  brackets\n\t\t\t\t\t\t temp =twobj.getTidContents(temp); //this.body contains the name of the tiddler\n\t\t\t\t\t\t if (temp != null) pieces[i] = temp;\t\t\t\t\t\t\n\t\t\t\t} else{\n\t\t\t\t\t\n\t\t\t\t\tif (i==6)  \t\t\t\tpieces[i] = '[{\"#newdata\":\"'+pieces[i]+'\"}]';//modes\t\n\t\t\t\t\telse if (i==4||i==5)\tpieces[i] = '['+pieces[i]+']';\t\n\t\t\t\t\telse if (i==3) {\n\t\t\t\t\t\t  if (pieces[i]) \tpieces[i] = '[{\"#space\":\" \"},{\"$tags\":\"((*@exists($tags)*??*$tags*))((*@exists($tags)*??*#space*))'+pieces[i]+'\"}]'; \n\t\t\t\t\t\t  else \t\t\t\tpieces[i] ='[]'; // don't modify/create\n\t\t\t\t\t   }\n\t\t\t\t\telse if (i==2)  \t\tpieces[i] = '[{\"#newdata\":\"'+pieces[i]+'\"}]';//text\t\t\n\t\t\t\t\telse if (i==1){\n\t\t\t\t\t\t  if (pieces[i]) \tpieces[i] = '[{\"$title\":\"'+pieces[i]+'\"}]';\n\t\t\t\t\t\t  else \t\t\t\tpieces[i] ='[]'; // don't modify/create\n\t\t\t\t\t   }  \t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.title =pieces[1];\n\t\t\tthis.body  =pieces[2];\n\t\t\tthis.tags = pieces[3];\n\t\t\tthis.fields =pieces[4]; \n\t\t\tthis.InitVals=pieces[5];\t\n\t\t\tthis.modes =pieces[6];\n\t\t}\t\n\t\telse { // we are passed a structure\n\t\t\tthis.title =defRule.title;\n\t\t\tthis.body  =defRule.body;\n\t\t\tthis.tags  =defRule.tags;\n\t\t\tthis.fields ='';\n\t\t\tthis.InitVals=\"\";\t\n\t\t\tthis.modes = modes;\t\n\t\t}\t\n\t}\n\n\tfunction userInput(source){ //replace  % delimited strings with user input\n\n\t\treturn source.replace(/%\\[\\$(.*?)\\]%/g,function(m,key,offset,str){\n\t\t\t\n\t\t\tvar parts=key.split(\"::\");\n\t\t\tvar userString={value:\" \"};\n\t\t\t//alert(parts[0]+\"::\"+parts[1]);\n\t\t\tif (parts.length !==2) {\n\t\t\t\t//use as a single field\n\t\t\t\treturn  m;\n\t\t\t}\n\t\t\t//tcBrowser.UserInputDialog(parts[1],userString);\n\t\t\t\n\t\t\treturn (userString.value);\n\t\t}\n\t)};\n\t function decodeutf8(source) {\n\n\t\t var chr1,chr2,chr3,result=\"\",i=0;\n\t\t while (i <source.length){\n\t\t\t chr1= source.charCodeAt(i);\n\t\t\t if (chr1<128) {result+= String.fromCharCode(chr1);i++;}\n\t\t\t else {\n\t\t\t\t chr2=source.charCodeAt(i+1);\n\t\t\t\t if ((chr1 > 191) && (chr1 < 224)){result+= String.fromCharCode(((chr1 & 31) << 6) | (chr2 & 63));i+=2;}\n\t\t\t\t else {\n\t\t\t\t\t chr3=source.charCodeAt(i+2);\n\t\t\t\t\t result+= String.fromCharCode(((chr1 & 15) << 12) | ((chr2 & 63) << 6) | (chr3 & 63));\n\t\t\t\t\t i+=3;\n\t\t\t\t }\n\t\t\t }\n\t\t }\n\t\t return result;\n\t}\n\n\tfunction firstRemoteTid(pageData) {\n\t\tpageData.remoteTidIndex = 0;\n\t\treturn pageData.remoteTidArr[0];\n\t}\n\t\n\tfunction hasNextRemoteTid(pageData) {//alert(api.remoteTidArr.length + \" len \"+api.remoteTidIndex );\n\t\treturn (pageData.remoteTidIndex < pageData.remoteTidArr.length);\n\t}\n\t\n\tfunction nextRemoteTid(pageData) {\n\t\tpageData.remoteTidIndex += 1;\n\t\tif (pageData.remoteTidIndex === pageData.remoteTidArr.length) return null;\n\t\treturn pageData.remoteTidArr[pageData.remoteTidIndex];\t\n\t}\t\n//  BJ! TODO ADD A LOG THAT IS ONLY WRITTEN WHEN SAVING THE TW - this needs to be done in the finish() function of the shim\n    function performAction(cat,pageData) {\n\t\tdefaults.defaultCommands[cat].command(pageData);\n\t}\n\t// This is the function called when clicking the context menu item.\n\tfunction paste(catName,pageData, section, atHome, substitutionTiddler)\n\t{  \n\t\t//BJ: if atHome exists, then catName should be the name of a tiddler containing the cat, if this is \"\"\n\t\t//then use build in 'dummy' rule and use substitutionTiddler as input to the substitution engine\n\t\t\n\t\tstatus (\"paste enter\");\n\t\tvar cat = findCategory (findSection(section,twobj.getTidContents(\"TiddlyClipConfig\")), catName);\n\t\tif (!cat.valid) {\n\t\t\t\tcat = findCategory (findSection(section), catName);//look for default rule\n\t\t}\n\t\tif (!cat.valid) {\t\t\t\n\t\t\tstatus(\"not valid category\");\n\t\t\treturn;\n\t\t}\n\t\tstatus (\"valid category\");\n\t\t//could check for type of cat.rules if function then run -- allows module plugin with Tw5\n\t\tvar cancelled = {val:false};\n\t\tvar tiddlers = [],tideditMode=[];//list of tids to store\n\t\tvar catTags = cat.tags;//main config tags \n\t\tvar patterns = cat.rules;\n\t\tvar startrule=0;\n\n\t\tif(hasMode(cat,\"nosub\")) return;\n\t\t//now loop over each tiddler to be created(defined in the category's extension entry)\n\t\t//if a list of tiddlers are to be copied from a page then we will have to loop over them as well\n\n\t\tstatus (\"before subst loop\");\n\t\tif (!hasModeBegining(cat,\"tiddler\"))  { //user has not selected  tiddler mode\n\t\t\tfor(var i=startrule; i<patterns.length; i++)  {\t\n\t\t\t\tvar tiddlerObj, writeMode;\n\t\t\t\ttiddlerObj = new tiddlerAPI.Tiddler();\n\t\t\t\tstatus (\"before subst\");\n\t\t\t\t\n\t\t\t\ttiddlerObj.setPageVars(pageData);\n\t\t\t\ttiddlerObj.setNormal(patterns[i],pageData);\n\t\t\t\ttiddlerObj.subst(patterns[i],pageData);\n\n\t\t\t\tstatus (\"after subst\");\t\n\t\t\t\t//tiddlerObj.text=userInput(tiddlerObj.text); //not used at present\n\t\t\t\ttiddlerObj.addTags(catTags);\n\t\t\t\tstatus (\"after addTags\");\n\t\t\t\tif (cancelled.val==true) {return;}\n\t\t\t\t//if (pageData.data.WriteMode !=\"none\") writeMode=pageData.data.WriteMode;\n\t\t\t\t//add tiddlers one by one to our list of edits\n\t\t\t\ttiddlers.push(tiddlerObj);\n\n\t\t\t\tstatus (\"after push to list\");\n\t\t\t}\n\t\t} else { \n\t\t\tvar tid;\n\t\t\tfor (tid=firstRemoteTid(pageData); hasNextRemoteTid(pageData);tid=nextRemoteTid(pageData)){\n\t\t\t\tif (!hasMode(cat,\"tiddlerscopy\")) {\n\t\t\t\t\tfor(var i=startrule; i<patterns.length; i++)  {\t\n\t\t\t\t\t\tvar tiddlerObj, writeMode;\n\t\t\t\t\t\ttiddlerObj = new tiddlerAPI.Tiddler(tid);\n\t\t\t\t\t\tstatus (\"before subst\");\n\t\t\t\t\t\t\n\t\t\t\t\t\ttiddlerObj.setPageVars(pageData);\n\t\t\t\t\t\ttiddlerObj.setTids(patterns[i],pageData);\n\t\t\t\t\t\ttiddlerObj.subst(patterns[i],pageData);\n\t\t\t\t\t\tstatus (\"after subst\");\t\n\t\t\t\t\t\t//tiddlerObj.text=userInput(tiddlerObj.text); //not used at present\n\t\t\t\t\t\ttiddlerObj.addTags(catTags);\n\t\t\t\t\t\tstatus (\"after addTags\");\n\t\t\t\t\t\tif (cancelled.val==true) {return;}\n\t\t\t\t\t\t//if (pageData.data.WriteMode !=\"none\") writeMode=pageData.data.WriteMode;\n\t\t\t\t\t\t//add tiddlers one by one to our list of edits\n\t\t\t\t\t\ttiddlers.push(tiddlerObj);\n\n\t\t\t\t\t\tstatus (\"after push to list\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttiddlerObj=new tiddlerAPI.Tiddler(tid);\n\t\t\t\t\tvar writeMode;//no editmode\n\t\t\t\t\ttiddlerObj.addTags(catTags);\n\t\t\t\t\ttiddlers.push(tiddlerObj);\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t\tif(hasMode(cat,\"nosave\")) return;\n\t\tstatus (\"before adding to tw\");\n\t\tvar tidnames=[];\n\t\tfor (var i =0; i< tiddlers.length; i++) {\n\t\t\tif (!tiddlers[i].noSave()){\n\t\t\t\taddTiddlerToTW(tiddlers[i]);\n\t\t\t\ttidnames.push(tiddlers[i].fields.title)\n\t\t\t}\n\t\t}\n\t\tif(hasMode(cat,\"nofin\")) return;\n\t\ttwobj.finish(tidnames);\n\t}  \n     \n    function save(tiddlerObj) {\n\t\tswitch (tiddlerObj.getSaveMode()) {\n\t\t\tcase 'add/import':\n\t\t\t\tif (twobj.tiddlerExists(tiddlerObj.fields.title))  twobj.importtids(tiddlerObj);\n\t\t\t\telse twobj.modifyTW(tiddlerObj);\n\t\t\tbreak;\n\t\t\tcase 'add':\n\t\t\t\ttwobj.modifyTW(tiddlerObj);\n\t\t\tbreak;\n\t\t\tdefault: //import\n\t\t\t\ttwobj.importtids(tiddlerObj);\n\t\t}\n\t}\n\t\t\n\tfunction addTiddlerToTW( tiddlerObj) { \n\n\t\tswitch (tiddlerObj.getWriteMode()) {\n\t\t\tcase 'once':\n\t\t\t\tvar oldtid = twobj.getTiddler(tiddlerObj.fields.title);//retrieve existing version\n\t\t\t\tif (!!oldtid) break;\n\t\t\t\tsave(tiddlerObj);\n\t\t\t\tbreak;\n\t\t\tcase 'move':\n\t\t\t\tvar oldtid = twobj.getTiddler(tiddlerObj.fields.title);//retrieve existing version\n\t\t\t\tif (!!oldtid)  {\n\t\t\t\t\toldtid.fields.title =oldtid.fields.title +'/'+ new Date();//move old tid by appending the date to its title\n\t\t\t\t\toldtid.modes = tiddlerObj.modes //need to know the save mode\n\t\t\t\t\tsave(oldtid);//move out the way\n\t\t\t\t}\n\t\t\t\tsave(tiddlerObj);\n\t\t\t\tbreak;\n\t\t\tcase 'inc':\n\t\t\t\ttiddlerObj.fields.title = twobj.getNewTitle(tiddlerObj.fields.title); \n\t\t\t\tsave(tiddlerObj);\n\t\t\t\tbreak;\n\t\t\tdefault: //import\n\t\t\t\tsave(tiddlerObj);\n\n\t\t}\n\t}\n\n\treturn api;\n}());\n///end tPaste ///\ntiddlyclip.modules.twobj = (function () {\n\n\tvar api = \n\t{\n\t\tonLoad:onLoad, \t\t\ttiddlerExists:tiddlerExists,\n\t\tmodifyTW:modifyTW,\t\tgetTiddler:getTiddler,\n\t\tgetTidContents:getTidContents,finish:finish,\n\t\timporttids:importtids,\tgetNewTitle:getNewTitle\t\n\t}\n\tvar   tiddlerAPI;\n\tfunction onLoad () {\n\t\t\t\ttiddlerAPI \t= tiddlyclip.modules.tiddlerAPI;\n\t}\n\tvar tw =null;\n\tvar storeStart;\t\t\n\n\tfunction getTidContents(tidname) {\n\t\t\treturn tiddlyclip.getTidContents(tidname);\n\t}\t\n\tfunction getNewTitle(tidname) {\n\t\t\treturn tiddlyclip.getNewTitle(tidname);\n\t}\n\tfunction getTiddler(tidname) {\t\n\t\tvar storedTid=tiddlyclip.getTiddler(tidname);\n\t\tif (storedTid) {\n\t\t\treturn (new tiddlerAPI.Tiddler(storedTid,true));\n\t\t}\n\t\telse return null;\n\t}\t\t\n\tfunction modifyTW(t)\n\t{\n\t    var fields={}; \n\t\tt.attribs = t.attribs.filter(function(i) {return t.toRemove.indexOf(i) < 0;});\n\t\tfor (var i = 0; i < t.attribs.length;i++) {\n\t\t\t\tfields[t.attribs[i]]=t.fields[t.attribs[i]];//put extended fields into a group\n\t\t}\n\t\ttiddlyclip.modifyTW(fields);\n\t}\t\t\n\n\tfunction importtids(t){\n\t    var fields={}; \n\t\tt.attribs = t.attribs.filter(function(i) {return t.toRemove.indexOf(i) < 0;});\n\t\tfor (var i = 0; i < t.attribs.length;i++) {\n\t\t\t\tfields[t.attribs[i]]=t.fields[t.attribs[i]];//put fields into a group\n\t\t}\n\t\ttiddlyclip.importTids(fields);\n\t}\t\n\t\t   \t\t\t   \n\tfunction tiddlerExists(title) {\n\t\t\treturn tiddlyclip.tiddlerExists(title);\n\t}\t\n\n\tfunction finish(tids) \n\t{\n\t\ttiddlyclip.finish(tids);\n\t}\n\t\t\t   \t\t\t   \n\treturn api;\n}());\n///end twobj///\n\ntiddlyclip.modules.tiddlerAPI = (function () {\n\n\tvar api = \n\t{\n\t\tonLoad:onLoad, Tiddler:Tiddler\n\t}\n\tvar tcBrowser, twobj,pref, util, table;\n\t\n\tfunction onLoad(doc) {\n\t\ttcBrowser\t= tiddlyclip.modules.tcBrowser;\n\t\ttwobj\t\t= tiddlyclip.modules.twobj;\t\n\t\tdefaults\t= tiddlyclip.modules.defaults;\n\t}\n\tfunction createDiv(){\n\t\treturn document.createElement(\"div\");\n\t}\n\t// Static method to bracket a string with double square brackets if it contains a space\n\tfunction encodeTiddlyLink(title)\n\t{\n\t\treturn title.indexOf(\" \") == -1 ? title : \"[[\" + title + \"]]\";\n\t};\n\n\t// Static method to encodeTiddlyLink for every item in an array and join them with spaces\n\tfunction encodeTiddlyLinkList(list)\n\t{\n\t\tif(list) {\n\t\t\tvar t,results = [];\n\t\t\tfor(t=0; t<list.length; t++)\n\t\t\t\tresults.push(encodeTiddlyLink(list[t]));\n\t\t\treturn results.join(\" \");\n\t\t} else {\n\t\t\treturn \"\";\n\t\t}\n\t};\n\tfunction removeDuplicates(names) {\n\t\tvar i,j,dup,nams = []; \n\n\t\t// Parse a string array from a bracketted list. For example \"OneTiddler [[Another Tiddler]] LastOne\"\n\t\tvar parseStringArray = function(value) {\n\t\t\tif(typeof value === \"string\") {\n\t\t\t\tvar memberRegExp = /(?:^|[^\\S\\xA0])(?:\\[\\[(.*?)\\]\\])(?=[^\\S\\xA0]|$)|([\\S\\xA0]+)/mg,\n\t\t\t\t\tresults = [],\n\t\t\t\t\tmatch;\n\t\t\t\tdo {\n\t\t\t\t\tmatch = memberRegExp.exec(value);\n\t\t\t\t\tif(match) {\n\t\t\t\t\t\tvar item = match[1] || match[2];\n\t\t\t\t\t\tif(item !== undefined && results.indexOf(item) === -1) {\n\t\t\t\t\t\t\tresults.push(item);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} while(match);\n\t\t\t\treturn results;\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t};\n\t\tnlist = parseStringArray(names);\n\t\t/*\n\t\tfor ( i=0; i < nlist.length; i++)\n\t\t\tnlist[i] = nlist[i].trim();\n\t\tfor ( i=0; i < nlist.length; i++){\n\t\t\tdup = false;\n\t\t\tfor ( j = i ; j > 0; j--) {\n\t\t\t\tif (nlist[i] === nlist[j-1]){\n\t\t\t\t\tdup = true;// alert(\"dup\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!dup) nams.push(nlist[i]);\n\t\t}\n\t\t*/\n\t\treturn encodeTiddlyLinkList(nlist);\n\t}\n\tfunction Tiddler(el,truetid) {\n\t\tthis.attribs = [\"text\"];\n\t\tthis.toRemove =[];\n\t\tvar current = this;\n\t\tcurrent.fields = {};\n\t\tcurrent.fields.text =\"\";\n\t\t//current.fields.title =\"\";\t\n\t\tif (!el) { \n\t\t\tel =  tiddlyclip.newProtoTiddler();\n\t\t\tfor (var atr in el.fields){ \n\t\t\t\t\tcurrent.fields[atr]=el.fields[atr];\n\t\t\t\t\tcurrent.attribs.push(atr);\t\t\n\t\t\t}\t\t\t\n\n\t\t    this.fields.tags=\"\";//BJ FIX remove or move to adapter\n\t\t} else if (!truetid) {\n\t\t\tif((typeof el) ===\"string\"){ //convert html to dom ;\n\t\t\t\tvar wrapper= createDiv();\n\t\t\t\twrapper.innerHTML= el;\n\t\t\t\tel= wrapper.firstChild;\n\t\t\t\twrapper = {};//release div\n\t\t\t}\t\t\t\t\t\t\t\t \t\t\t\t\n\t\t\tthis.fields.text = undoHtmlEncode(el.innerHTML.\n\t\t\t\t\treplace(/\\n<pre xmlns=\"http:\\/\\/www.w3.org\\/1999\\/xhtml\">([\\s|\\S]*)<\\/pre>\\n/mg,\"$1\").\n\t\t\t\t\treplace(/\\n<pre>([\\s|\\S]*)<\\/pre>\\n/mg,\"$1\"));\n\t\t\tvar  j = el.attributes, m, extraTags='';\n\t\t\tfor (var i = j.length; i!== 0; i--) {\n\t\t\t\tm=j[i-1].nodeName; \n\t\t\t\tv=j[i-1].value;\n\t\t\t\tthis.attribs.push(m);\n\t\t\t\tthis.fields[m] = undoHtmlEncode(v) ;\n\t\t\t}\n\n\t\t} else {\n\t\t\tfor (var atr in el.fields){ \n\t\t\t\tcurrent.fields[atr]=el.fields[atr];\n\t\t\t\tcurrent.attribs.push(atr);\t\t\n\t\t\t}\n\t\t\tif (!!this.fields.tags) this.fields.tags = (this.fields.tags instanceof Array)?this.fields.tags.join(' '):this.fields.tags;\n\t\t    else this.fields.tags=\"\";\n\t\t\t//this.body =   this.text;\n\t\t} \n\t\t\n\t\treturn this;\n\t}\n\t\n\tTiddler.prototype.addMimeType=function(mime){\n\t\tthis.attribs.push('type');\n\t\tthis.fields.type = mime;\n\t}\n\t\n\tTiddler.prototype.exportFieldsTo=function(obj){\n\t\tif (!obj) return null;\n\t\tfor (var i = 0; i<this.attribs.length; i++){ \n\t\t\tvar atr = this.attribs[i];\n\t\t\tobj[atr]=this.fields[atr]; \t\n\t\t};\t\t\t\t\t \n\t\treturn obj;\n\t}\t\n\n\tTiddler.prototype.noSave=function(){\n\t\treturn (!this.fields.title ||this.hasMode(\"nosave\"));\n\t}\n\t\t\n\tTiddler.prototype.addTags=function(tags){\n\t\tif (!tags) return;\n\t\tif (!this.fields.tags) {\n\t\t\tthis.fields.tags = removeDuplicates(tags);\n\t\t\tthis.attribs.push(\"tags\");\t\n\t\t}\n\t\telse {\n\t\t\tthis.fields.tags = removeDuplicates(this.fields.tags + ' '+ tags);\n\t\t}\n\t}\n\n\tTiddler.prototype.applyEdits = function(fields) {\n\t\tfor (var i in fields){\t\t\t\t\n\t\t\tif (!this.hasOwnProperty(i)) this.attribs.push(i);//add to list of fields to update. BJ should be this.attribs.hasOwnProperty(i)??\n\t\t\tthis.fields[i] = fields[i];\n\t\t}\n\t}\n\t\n\tTiddler.prototype.removeField = function(field) {\n\t\t\tthis.toRemove.push(field);\n\t}\n\n\tTiddler.prototype.hasMode=function(mode){\n\t\tif (!this.modes) return false;\n\t\tfor (var i=0; i< this.modes.length;i++)\n\t\t\tif (mode === this.modes[i]) return true;\n\t\treturn false;\n\t}\n\t\n\tTiddler.prototype.getWriteMode=function(mode){\n\t\tvar writeMode = 'normal';\n\t\tif (!this.modes) return writeMode;\n\t\tif (this.hasMode(\"move\")) return \"move\";\n\t\telse if (this.hasMode(\"once\")) return \"once\";\n\t\telse if (this.hasMode(\"inc\")) return \"inc\";\n\t\treturn writeMode;\n\t}\n\t\n\tTiddler.prototype.getSaveMode=function(mode) {\n\t\tif (!this.modes) return 'import';\n\t\telse if (this.hasMode(\"add/import\")) return \"add/import\";\n\t\telse if (this.hasMode(\"add\")) return \"add\";\n\t\treturn 'import';\n\t}\n\t\n\tfunction undoHtmlEncode( input ) {\n\t\tinput =input\n        .replace(/&bar;/g, '|')\n        .replace(/&quot;/g, '\"')\n        .replace(/&lt;/g, '<')\n        .replace(/&gt;/g, '>')\n        .replace(/&amp;/g, '&');\n        return (input);   \n\t}\n\n\tfunction extractModes(tagString) {\n\t\tvar modes =[], tList = tagString.split(' ');\n\t\tfor (var i=0; i< tList.length; i++) {\n\t\t\tmodes[i] = tList[i].trim();\n\t\t}\n\t\treturn modes;\n\t}\n\tTiddler.prototype.setPageVars  =\tfunction (pageData){\n\t\tvar dateLong=    'DDD, MMM DDth, YYYY';\n\t\tvar dateTimeLong='DDD, MMM DDth, YYYY at hh12:0mm:0ss am';\t\n\t\tvar dateShort=   'DD MMM YYYY';//journal form\n\t\tvar dateTimeShort=   'YYYY/MM/DD 0hh:0mm:0ss';//journal form\n\n\t\tvar dates =tiddlyclip.dates();\n\t\tfor (var atr in dates){ \n\t\t\tpageData.data[atr]=dates[atr];\n\t\t}\n\t\tpageData.data.category1stWord=pageData.data.category.replace(/(.*) (.*)/,\"$1\");\n\n\t\tvar macrosx =defaults.getDefs();\n\t\ttable={$:{}};table['#']={};table['@']={};\n\t\tfor (var n in pageData.data) {table['@'][n]= pageData.data[n];}\n\t\tfor (var n in macrosx) {table['@'][n]= macrosx[n];}\n\t}\n\n\tTiddler.prototype.setTids  =\tfunction (rule,pageData){\n\n\t\t//---first determine the title\n\t\ttable['#']={};\t\n\t\tthis.exportFieldsTo(table['$']);\n\t\tthis.parseStructure(rule.title);\n\t\tvar title = table['$'].title;\t\t\t \n\t\ttable['@']['newtiddler']= 'false';\n\n\t\t//xecute mode rule and obtain (possibly) modified modes\n\t\tthis.parseStructure(rule.modes);\t\t\t \n\t\tthis.modes=extractModes(table['#']['newdata']);\n\t\t//---modes are now determined \n\t}\n\t\n\tTiddler.prototype.setNormal  =\tfunction (rule,pageData){\n\n\t\t//---first determine the title\n\t\tthis.parseStructure(rule.title);\n\t\tvar title = table['$'].title;\t\t\t \n\t\ttable['#']={};\t\t\n\t\t//---next we need to find the modes before we can decide how to update\n\t\t//-----1- does tiddler exist already?\n\t\tvar storedTid=twobj.getTiddler(title);\n\t\tif (storedTid) {\n\t\t\tstoredTid.exportFieldsTo(table['$']);\n\t\t\ttable['@']['newtiddler']= 'false';\n\t\t} else {\n\t\t\ttable['@']['newtiddler']= 'true';\n\t\t\tthis.exportFieldsTo(table['$']);\n\t\t}\n\t\t//-----2- execute mode rule and obtain (possibly) modified modes\n\t\tthis.parseStructure(rule.modes);\t\t\t \n\t\tthis.modes=extractModes(table['#']['newdata']);\n\t\t//---modes are now determined \n\t\ttable['#']={};\n\t\ttable['$']={};\n\n\t\t//---expose whether this is a new tiddler\n\t\tif (this.hasMode('append')||this.hasMode('prepend')||this.hasMode('modify')) {\n\t\t\tvar storedTid=twobj.getTiddler(title);\n\t\t\tif (storedTid) {\n\t\t\t\tstoredTid.exportFieldsTo(table['$']);\n\t\t\t\ttable['@']['newtiddler']= 'false';\n\t\t\t} else { \n\t\t\t\tthis.exportFieldsTo(table['$']);\n\t\t\t\tthis.parseStructure(rule.InitVals);\n\t\t\t\ttable['@']['newtiddler']= 'true';\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tthis.exportFieldsTo(table['$']);\n\t\t\tthis.parseStructure(rule.InitVals);\n\t\t\ttable['@']['newtiddler']= 'true';\n\t\t}\n\t\ttable['$'].title=title;\n\t}\n\tTiddler.prototype.subst  =\tfunction (rule,pageData){\n\t\t//---apply rules\n\t\ttable['#']={};\n\t\tthis.parseStructure(rule.body);\t\n\t\t//---check to see if user will handle insertion of new text\t\t \n\t\tif (!this.hasMode('no-textsaver')) {\n\t\t\tvar data = table['#']['newdata'], prepend =this.hasMode('prepend');\n\t\t\tstatus (\"not textsaver with data \"+ data+\" olddata \"+\ttable['$']['text']);\n\t\t\t//BJ does this.fields.text exist with a new tiddler? \n\t\t\ttable['$']['text'] = (!!prepend)?data + table['$']['text'] :table['$']['text'] + data;\n\t\t}\n\t\ttable['#']={};\n\t\tthis.parseStructure(rule.tags);\t\n\n\t\ttable['#']={};\n\t\ttable['@'].fields=table['$'];\n\t\tthis.parseStructure(rule.fields);\n\t\t//---move data from parser table into tiddler\n\t\tthis.applyEdits(table['$']);\n\t\treturn this;\n\t}\n\t///////////////// parser implementation /////////////////\n\tvar error=function (message) {\n\t\t alert(message);\n\t}\n\n\tfunction getSimpleVarFrom (n ) {\n\t\tn = n.trim();\n\t\tvar type = n.substring(0,1);\n\t\tif (type !== '#' &&type !=='$' && type !=='@') error(\"variable: invalid name \"+n);\n        else return {type:type, leftSide:n.substring(1)};\n\t}\n\tfunction valOf(n, test) {\n\t\tvar val, type = n.substring(0,1);\n\t\tif (type !== '#' &&type !=='$'&&type !=='@'){\n\t\t\terror(\"source: invalid name\"+n);\n\t\t\treturn null;\n\t\t}\n\t\telse {\n\t\t\tval=table[type][n.substring(1)];\n\t\t\tif (val == undefined) { \n\t\t\t\tif (!test)  error(\"source: invalid val \"+n);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn val;\n\t\t}\n\t }\n\tfunction toValues(sources) {\n\t\tvar values = [], returned;\n\t\tfor (var i = 0 ; i < sources.length ;i++) {\n\t\t\tif ((values[i]= valOf(sources[i]))==null) return null;\n\t\t}\n\t\treturn  values;\n\t}\n\tfunction makeInt (value) {\n\t\tif(/^(\\-|\\+)?([0-9]+)$/.test(value)) {\n\t\t\treturn Number(value);\n\t\t}\n\t\treturn NaN;\n\t}\n\n\tTiddler.prototype.parseStructure=function(cb,localonly) {\n\t\t//updates the global 'table'\n\t\tvar target, b;\n\t\ttry {\n\t\tb=JSON.parse(cb);\n\t\t} catch(e) {\n\t\t\terror(cb+\" is not a json\");\n\t\t\treturn;\n\t\t}\n\t\tfor (var i=0; i < b.length; i++) {\n\t\t\tvar moreThanOne = 0;\n\t\t\tfor (var n in b[i]) {//n is our nodes combined target/operator string - eg #x#EQ\n\t\t\t\tif (moreThanOne) error (\"general:more than one subterm in node\");\n\t\t\t\tvar rightSide =b[i][n];\n\t\t\t\tif (typeof rightSide === \"object\") error(\"source: invalid type object\");\n\t\t\t\telse if (typeof rightSide === \"string\") {\n\t\t\t\t\tvar replaceOp= this.replaceALL(rightSide);\n\t\t\t\t\tif (!replaceOp.abort) rightSide = replaceOp.result;\n\t\t\t\t\telse {\n\t\t\t\t\t\tmoreThanOne++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse error(\"source: invalid type\");\n\t\t\t\tvar returedVals =  getSimpleVarFrom (n);\n\t\t\t\tvar leftSide =  returedVals.leftSide;\n\t\t\t\tvar type \t =  returedVals.type;\n\t\t\t\tif (type !== '#' &&type !=='$') error(\"target: invalid name \"+n);\t\t\t\n\t\t\t\tif (!localonly)  table[type][leftSide] = rightSide;\n\t\t\t\telse {\n\t\t\t\t\tif (type=='#') table[type][leftSide] = rightSide;\n\t\t\t\t\telse error(\"target: invalid assignment\");\n\t\t\t\t}\n\t\t\t\tmoreThanOne++;\t\t\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction handleBinaryForm(leftSide,operator,rightSide) {\n\t\tswitch (operator) {\n\t\t\tcase 'PS':\n\t\t\tcase 'MS':\n\t\t\t\trightSide = makeInt(rightSide);\n\t\t\t\tif ( isNaN(rightSide)) {error(\"rightside: can only add integers\"); return null;}\n\t\t\t\tleftSide = makeInt(leftSide);\n\t\t\t\tif (isNaN(leftSide)) {error(\"leftside: can only add integers\"); return null;}\n\t\t\t\treturn ((operator==='PS')?leftSide+rightSide:leftSide-rightSide);\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase 'EQ':\n\t\t\tcase 'NQ':\n\t\t\t//alert(leftSide+\" cmp \"+rightSide);\n\t\t\t\treturn ((operator==='EQ')?leftSide==rightSide:leftSide!=rightSide);\t\t\t\n\t\t\t\tbreak;\n\t\t\tdefault: error(\"operator not found\");\n\t\t\t\t\t return null;\n\t\t}\t\n\t}\n\t Tiddler.prototype.abort=function(source) {\n\t\tif (/@abort\\(/.test(source) ){ return true;}\n\t\treturn false;\n\t}\n\t Tiddler.prototype.handleFunction=function(source) {\n\t\tvar self = this, abort=false;\n\t\tfunction alertAll() {\n\t\t\tvar args = Array.prototype.slice.call(arguments);\n\t\t\targs.unshift('alertAll');\n\t\t\talert(args.join(' '));\n\t\t}\n\t\tif (!/@(.*)\\(([\\S\\s]*?)\\)/.test(source) )return {result:null,abort:abort};\n\t\t//abort macro\n\t\treturn {result:source.replace(/@(.*)\\(([\\S\\s]*?)\\)/g,function(m,key1,key2,offset,str){\n\t\t\tif (key1==\"delete\") {\n\t\t\t\tself.removeField(key2.substring(1));\n\t\t\t\treturn \"deleted \"+key2;\n\t\t\t}\n\t\t\tif (key1==\"abort\") {\n\t\t\t\tif (!key2) {abort=true;return null;} //empty params means abort whatever\n\t\t\t\tif (valOf(key2, true) == null) {abort=true;return null;} //if val not exist abort\n\t\t\t\tif (valOf(key2) === 'false'){abort=true;return null;}\n\t\t\t\treturn \"\";//otherwise just remove the abort() token\n\t\t\t}\n\t\t\tif (key1==\"exists\") {\n\t\t\t\tif (valOf(key2, true) != null)\n\t\t\t\t\treturn \"true\";\n\t\t\t\telse\n\t\t\t\t\treturn \"false\"\n\t\t\t}\n\t\t\tif (key1==\"alert\") {\n\t\t\t\tif (valOf(key2) == null)\n\t\t\t\t\talert(key2+\" null\");\n\t\t\t\telse\n\t\t\t\t\talert(valOf(key2));\n\t\t\t\treturn \"alerted\";\n\t\t\t}\n\n\t\t\t//handle normal functions\n\t\t\tvar vals;\n\t\t\tif (!!key2) vals = toValues(key2.split(/\\s*,\\s*/));\n\t\t\telse vals = null;\n\t\t\tif (key1==\"alertAll\") {\n\t\t\t\t\talertAll.apply(null,vals);\n\t\t\t\t\treturn \"all alerted\";\n\t\t\t}\n\t\t\ttry {\n\t\t\t\treturn tiddlyclip.macro[key1].apply(null,vals);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\talert (key1 + \"marco not found\");\t\n\t\t\t}\n/*\n\t\t\ttry {\n\t\t\t\treturn tiddlyclip[key1](val);\n\t\t\t} catch (e) {\n\t\t\t\terror (\"macro \"+key1 +\" not found\");\n\t\t\t\treturn \"macro \" + key1 + \" not found\";\n\t\t\t} \n*/\t\t\t\t\n\t\t\treturn m;\n\t\t}),abort:abort};\n\t}\n\t\n\tTiddler.prototype.replaceALL=function(source, data){ //replace all ((* *)) delimited strings\n\t\tvar self = this, abort=false;\n\t\treturn {result:source.replace(/\\(\\(\\*([\\S\\s]*?)\\*\\)\\)/g,function(m,key,offset,str){ \n\t\t\tvar parts, vals, res, firstterm, firstparts, testedTrue = true;\n\t\t\t// check for  ((*conditional*??*Use this variable*??*or use this variable*))\n\t\t\tfirstparts= key.split(\"*??*\");\n\t\t\t//handle conditional string\n\t\t\tif (firstparts.length >1) {\t\n\t\t\t\tvar negate=(firstparts[0].substring(0,1)== '!');\n\t\t\t\tif (negate) {\n\t\t\t\t\tfirstterm = firstparts[0].substring(1);\n\t\t\t\t} else {\n\t\t\t\t\tfirstterm = firstparts[0];\n\t\t\t\t}\n\t\t\t\t// regex condition\n\t\t\t\tif ((parts= firstterm.split(\"/\")).length ==3) {\n\t\t\t\t\tif ((vals = toValues(parts)) == null) return m;\n\t\t\t\t\tvar regParts = (valOf(parts[1])).split(\"/\");\n\t\t\t\t\tvar pattern=new RegExp(regParts[1],regParts[2]);\n\t\t\t\t\t\n\t\t\t\t\tif (negate&&pattern.test(vals[0])) testedTrue = false;\n\t\t\t\t\telse if (!negate&&!pattern.test(vals[0]))testedTrue = false;\n\t\t\t\t}\n\t\t\t\t// comparision\n\t\t\t\telse if ((parts= firstterm.split(\"==\")).length ==2) {\n\t\t\t\t\tif ((vals =toValues(parts))==null) return m;\n\t\t\t\t\tif ((res=handleBinaryForm(vals[0],negate?\"NQ\":\"EQ\",vals[1]))==null) return m;\n\t\t\t\t\telse if (!res) testedTrue = false; \n\t\t\t\t} \n\t\t\t\t// macro\n\t\t\t\telse if ((res = self.handleFunction(firstterm).result) != null) { // a function\n\t\t\t\t\tif ( negate && res===\"true\") \t{testedTrue = false;}\n\t\t\t\t\tif (!negate && res===\"false\") {testedTrue = false;}\n\n\t\t\t\t}\n\t\t\t\t// boolean variable\n\t\t\t\telse {\n\t\t\t\t\tif ((vals =valOf(firstterm))==null)  return m;\n\t\t\t\t\tif ( negate && vals===\"true\") \ttestedTrue = false;\n\t\t\t\t\tif (!negate && vals===\"false\") testedTrue = false;\n\t\t\t\t}\n\n\t\t\t\tif (testedTrue) {\n\t\t\t\t\tkey = firstparts[1];\n\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tif (firstparts.length == 2) return '';//no 'else' defined\n\t\t\t\t\tkey = firstparts[2];\n\t\t\t\t}\n\t\t\t}\n\t\t\t// end of handling conditional string part\n\t\t\tvar parts;\n\t\t\t// regex ((*@PageRef/#rule/#term*)) or ((*.....*??*@PageRef/#rule/#term*))\n\t\t\tif ((parts = key.split(\"/\")).length ==3) {\n\t\t\t\tif ((vals = toValues(parts)) == null) return m;\n\t\t\t\tvar regParts = (valOf(parts[1]));\n\t\t\t\tvar regexBody = regParts.replace(/\\/([\\s\\S]*)\\/.*$/,\"$1\");\n\t\t\t\tvar regexflags = regParts.replace(/.*\\/(.*?)$/,\"$1\");\n\t\t\t\tvar pattern=new RegExp(regexBody,regexflags);\n\t\t\treturn vals[0].replace(pattern, vals[2]);\n\t\t\t}\n\t\t\t// substitute\n\t\t\tif ((parts = key.split(\":\")).length ==3) {\n\t\t\t\tif ((vals = toValues(parts)) == null) return m;\t\t\n\t\t\t\treturn vals[0].replace(vals[1], vals[2]);\n\t\t\t}\n\t\t\t// add \n\t\t\tif ((parts = key.split(\"+\")).length == 2) {\n\t\t\t\tif ((vals = toValues(parts)) == null) return m;\n\t\t\t\tif ((res = handleBinaryForm(vals[0],\"PS\",vals[1])) == null) return m;\n\t\t\t\treturn res.toString();\n\t\t\t}\t\n\t\t\t// subtract\t\n\t\t\tif ((parts= key.split(\"-\")).length ==2) {\n\t\t\t\tif ((vals = toValues(parts)) == null) return m;\n\t\t\t\tif ((res = handleBinaryForm(vals[0],\"PS\",vals[1])) == null) return m;\n\t\t\t\treturn res.toString();\n\t\t\t}\n\t\t\t// macro\n\t\t\tvar returned = self.handleFunction(key);\n\t\t\tif (returned.abort) {abort=true; return null};//abort replaceAll completely\n\t\t\tif ((res = returned.result) != null) return res;\n\t\t\telse \n\t\t\t// vanilla variable\n\t\t\tif ((res = valOf(key)) != null) return res;\n\t\t\t// error\n\t\t\treturn m;\n\t\t}),abort:abort};\n    }\n\t///////////////// parser implementation end/////////////////\n\treturn api;\n\t\n}());\n///end tiddlerObj///\n tiddlyclip.modules.defaults = (function () {\n\tvar defaultCommands = {\n\t\tsearch:{tip:'search selection in tw', command:function(){alert(\"mysearch\")}}\n\t};\n\tvar tPaste, twobj;\n\tfunction onLoad() {\n\t\ttwobj=tiddlyclip.modules.twobj;\n\t}\n\tvar api = \n\t{\n\t\tonLoad:onLoad, getDefaultRule:getDefaultRule, \n\t\tgetDefaultCategories:getDefaultCategories,\n\t\tgetDefs:getDefs,\n\t\tdefaultCommands:defaultCommands\n\t}\t\n\n\tfunction getDefs(){\n\t\tif (!twobj.tiddlerExists(\"TiddlyClipDefs\"))  return tiddlyclip.defs;\n\n\t\tvar content = twobj.getTidContents(\"TiddlyClipDefs\");//where all marcos are defined\t\n\t\ttry {\n\t\t\tif (content ==\"\") return tiddlyclip.defs;\n\t\t\tvar values =JSON.parse(content);\n\t\t\tif (!!values) {return values;}\n\t\t}catch(e){\t\n\t\t}\n\t\treturn tiddlyclip.defs; \n\t}\n\t\n\tfunction getDefaultCategories() {\n\t\treturn tiddlyclip.defaultCategories;\n\t}\t\t\n \n\tfunction getDefaultRule(ruleName) {\n\t\treturn tiddlyclip.getDefaultRule(ruleName);\n\t}\n \treturn api;\n}());\n///end defaults///\n\n\nvar MODULES = tiddlyclip.modules;\nfor (var mod in MODULES) {\n\tMODULES[mod].onLoad();\n}\n\n} \n\n}());\n\n"
        },
        "defaultPin": {
            "title": "defaultPin",
            "type": "text/vnd.tiddlywiki",
            "text": "\\rules only table wikilink prettylink\n\n|!Title|!Body|!Tags|!Fields modifiers|!field initials|!Modes|\n|((*@pageTitle*))|((*@pageRef*))\\n\\n[img[((*@onImage*??*@imageURL*??*@largestImgURL*))]]\\n\\n((*@text*))\\n\\n((*@exists(@userstring)*??*@userstring*))|||{\"$location\":\"((*@pageRef*))\"},{\"$caption\":\"((*@pageTitle*))\"},{\"$when\":\"((*@dateTimeShort*))\"}|inc add|\n"
        },
        "defaultSnap": {
            "title": "defaultSnap",
            "type": "text/vnd.tiddlywiki",
            "text": "\\rules only table wikilink prettylink\n\n|!Title|!Body|!Tags|!Fields modifiers|!field initials|!Modes|\n|((*@pageTitle*))/thumbprint|((*@exists(@snap)*??*@snap*))|ClippedImage||{\"$type\":\"image/png\"},{\"$when\":\"((*@dateTimeShort*))\"},{\"$location\":\"((*@pageRef*))\"}|[[SnapRuleMode]]|\n|((*@pageTitle*))|((*@pageRef*))\\n\\n{{((*@pageTitle*))/thumbprint}}\\n\\n((*@text*))\\n\\n|||{\"$location\":\"((*@pageRef*))\"},{\"$caption\":\"((*@pageTitle*))\"},{\"$when\":\"((*@dateTimeShort*))\"}|append add|\n"
        },
        "defaultSnip": {
            "title": "defaultSnip",
            "type": "text/vnd.tiddlywiki",
            "text": "\\rules only table wikilink prettylink\n\n|!Title|!Body|!Tags|!Fields modifiers|!field initials|!Modes|\n|((*@pageTitle*))|((*@pageRef*))\\n\\n((*@text*))\\n\\n|||{\"$location\":\"((*@pageRef*))\"},{\"$caption\":\"((*@pageTitle*))\"},{\"$when\":\"((*@dateTimeShort*))\"}|append add|\n\t\t\t\t\t\t\n"
        },
        "defaultTip": {
            "title": "defaultTip",
            "type": "text/vnd.tiddlywiki",
            "text": "\\rules only table wikilink prettylink\n\n|!Title|!Body|!Tags|!Fields modifiers|!field initials|!Modes|\n||||{\"#type\":\"text/x-tiddlywiki\"},{\"$type\":\"((*@classic*??*#type*??*@abort()*))\"}||no-textsaver import|\n\n\n"
        },
        "$:/plugins/bj/tiddlyclip/tcadapter.js": {
            "text": "/*\\\ntitle: $:/plugins/bj/tiddlyclip/tcadapter.js\ntype: application/javascript\nmodule-type: widget\n\n\n\\*/\n\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nif($tw.browser) {\n\trequire(\"$:/plugins/bj/tiddlyclip/tidpaste.js\");\n}\nvar CreateTiddlerWidget = function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n\tthis.addEventListeners([\n\t\t{type: \"tiddlyclip-create\", handler: \"handleTiddlyclipEvent\"}\n\t]);\n};\n\n\n/*\nInherit from the base widget class\n*/\nCreateTiddlerWidget.prototype = new Widget();\n\n/*\nRender this widget into the DOM\n*/\nCreateTiddlerWidget.prototype.render = function(parent,nextSibling) {\n\tthis.parentDomNode = parent;\n\tthis.computeAttributes();\n\tthis.execute();\n\tthis.renderChildren(parent,nextSibling);\n}\n\nCreateTiddlerWidget.prototype.getTiddlerList = function() {\n\tvar defaultFilter = \"[all[shadows+tiddlers]tag[$:/tags/tiddlyclip]]\";\n\treturn this.wiki.filterTiddlers(defaultFilter,this);\n}\n/*\nCompute the internal state of the widget\n*/\nCreateTiddlerWidget.prototype.execute = function() {\n\tvar self = this;\n\t// Get our parameters here we could allow an module to modify the plugin\n\t// Get the commands and place them in the tiddlyclip structure to expose them to the user\n\ttiddlyclip.dates=function(){\n\t\tvar dates ={};\n\t\tvar dateLong=    'DDD, MMM DDth, YYYY';\n\t\tvar dateTimeLong='DDD, MMM DDth, YYYY at hh12:0mm:0ss am';\t\n\t\tvar dateShort=   'DD MMM YYYY';//journal form\n\t\tvar dateTimeShort=   'YYYY/MM/DD 0hh:0mm:0ss';//journal form\n\t\t\n\t\tdates.yearMonth=$tw.utils.stringifyDate(new Date()).replace(/(.*)\\.(.*)/,\"$1\").substr(0,6);\n\t\tdates.dateTimeLong=   $tw.utils.formatDateString(new Date(),dateTimeLong);\t\n\t\tdates.dateLong=       $tw.utils.formatDateString(new Date(),dateLong);\t\t\n\t\tdates.dateShort=      $tw.utils.formatDateString(new Date(),dateShort);\t       \n\t\tdates.dateComma=     dates.dateShort.toString().replace(/ /g,':');\n\t\tdates.dateTimeShort=  $tw.utils.formatDateString(new Date(),dateTimeShort);\n\t\treturn dates;\n\t}\n\ttiddlyclip.getDefaultRule=function (ruleName) {\n\t\tvar defaultRules = {\n\t\t\tdefaultTid:'||||{\"#type\":\"text/x-tiddlywiki\"},{\"$type\":\"((*@classic*??*#type*??*@abort()*))\"}||no-textsaver import|',\n\t\t\tdefaultSnip:\n\t\t\t'|((*@pageTitle*))/thumbprint|((*@exists(@snap)*??*@snap*))|ClippedImage|'+\n\t\t\t'|{\"$type\":\"image/png\"},{\"$when\":\"((*@dateTimeShort*))\"},{\"$location\":\"((*@pageRef*))\"}|[[SnapRuleMode]]|'+\n\t\t\t'|((*@pageTitle*))|((*@pageRef*))\\\\n\\\\n{{((*@pageTitle*))/thumbprint}}\\\\n\\\\n((*@text*))\\\\n\\\\n||'+\n\t\t\t'|{\"$location\":\"((*@pageRef*))\"},{\"$caption\":\"((*@pageTitle*))\"},{\"$when\":\"((*@dateTimeShort*))\"}||',\n\t\t\tdefaultPin: '|((*@pageTitle*))|((*@pageRef*))\\\\n\\\\n[img[((*@onImage*??*@imageURL*??*@largestImgURL*))]]\\\\n\\\\n((*@text*))\\\\n\\\\n((*@exists(@userstring)*??*@userstring*))||'+\n\t\t\t\t\t\t'|{\"$location\":\"((*@pageRef*))\"},{\"$caption\":\"((*@pageTitle*))\"},{\"$when\":\"((*@dateTimeShort*))\"}|inc|'\n\t\t}\n\t\treturn defaultRules[ruleName];\n\t}\n\ttiddlyclip.defaultCategories = [\n\t\t\"|Tid|copy tids||defaultTid|tiddlers|\",\n\t\t\"|Snip|copy||defaultSnip||\",\n\t\t\"|Pin|Pin it||defaultPin||\"\n\t];\n\n\ttiddlyclip.defs = {\n\t}\n\ttiddlyclip.newProtoTiddler = function (){\n\t\tvar tid = new $tw.Tiddler($tw.wiki.getCreationFields(),$tw.wiki.getModificationFields());\n\t\tvar current = {fields:{}};\n\t\tfor (var atr in tid.fields){ \n\t\t\tcurrent.fields[atr]=tid.getFieldString(atr);\t\n\t\t}\n\t\treturn current;\t\n\t}\n\ttiddlyclip.modifyTW= function(fields){\n\t\t\t$tw.wiki.addTiddler(new $tw.Tiddler(fields,$tw.wiki.getModificationFields()));\n\t}\n\ttiddlyclip.getNewTitle= function(base,options) {\n\t\t\toptions = options || {prefix: \"-\"};\n\t\t\treturn $tw.wiki.generateNewTitle(base,options);\n\t}\n\ttiddlyclip.getTidContents= function(tidname) {\n\t\tvar tiddler = $tw.wiki.getTiddler(tidname);\n\t\t\tswitch (tiddler.fields.type) {\n\t\t\t\tcase \"application/x-tiddler-dictionary\":\n\t\t\t\t\treturn JSON.stringify($tw.utils.parseFields(tiddler.fields.text));\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn $tw.wiki.getTiddlerText(tidname);\n\t}\n\t//$tw.wiki.my.logEnable= function() {tiddlyclip.logit=true};\n\t//$tw.wiki.my.logDisable= function() {tiddlyclip.logit=false};\n\ttiddlyclip.log= function(x) {\n\t\t//if (tiddlyclip.logit) \n\t\t//alert(x);\n\t};\n\ttiddlyclip.tiddlerExists= function(title) {\n\t\t\treturn($tw.wiki.tiddlerExists(title));\n\t}\t\n\ttiddlyclip.getTiddler= function (title) {\n\t\tvar tid = $tw.wiki.getTiddler(title);\n\t\tif (!tid){\n\t\t\treturn null;\n\t\t}\n\t\tvar current = {fields:{}};\n\t\tfor (var atr in tid.fields){ \n\t\t\tcurrent.fields[atr]=tid.getFieldString(atr);\t\n\t\t}\n\t\treturn current;\t\n\t}\t\n\ttiddlyclip.finish=function (tids) {\n\t\tself.dispatchEvent({type: \"tm-auto-save-wiki\"}); \n\t}\n\ttiddlyclip.importTids =function (tidfields) {\n\t\t//tiddlyclip.log(\"savefile at last!\");\n\t\t// Get the details from the message\n        var tiddlerFieldsArray = [tidfields];\t\t\t\t\t\n\t\tself.dispatchEvent({type: \"tm-import-tiddlers\", param: JSON.stringify(tiddlerFieldsArray)});\t\n\t}\n\tthis.list = this.getTiddlerList();\n\ttiddlyclip.macro={};\n\t$tw.utils.each(this.list,function(title,index) {\n\t\ttry {\n\t\t\tvar func = require(title);\n\t\t\t\n\t\t\ttiddlyclip.macro[func.name]=func.run;\n\t\t} catch (e) {\n\t\t\talert(\"tc: problem with command \" + title);\n\t\t} \n\t});\t\t\n\tthis.makeChildWidgets();\n};\n\nCreateTiddlerWidget.prototype.handleTiddlyclipEvent = function(event) {\n\n\ttiddlyclip.modules.tPaste.paste(event.category,event.pagedata,event.currentsection);\t\n\treturn false;\n};\n\t\t\n/*\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\n*/\nCreateTiddlerWidget.prototype.refresh = function(changedTiddlers) {\n\t//var changedAttributes = this.computeAttributes();\n\tif(false) {\n\t\tthis.refreshSelf();\n\t\treturn true;\n\t} else {\n\t\treturn this.refreshChildren(changedTiddlers);\t\t\n\t}\n};\nexports.createclip = CreateTiddlerWidget;\n\n})();\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar tcWidget = function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n};\n\n/*\nInherit from the base widget class\n*/\ntcWidget.prototype = new Widget();\n\n/*\nRender this widget into the DOM\n*/\ntcWidget.prototype.render = function(parent,nextSibling) {\n\tvar doc = document;\n\tvar self =this;\n\t{\n\t\t// Inject the message box\n\t\tvar messageBox = doc.getElementById(\"tiddlyclip-message-box\");\n\t\t//remove previously setup\n\t\tif(messageBox) messageBox.outerHTML = \"\";\n\n\t\tmessageBox = doc.createElement(\"div\");\n\t\tmessageBox.id = \"tiddlyclip-message-box\";\n\t\tmessageBox.style.display = \"none\";\n\t\tdoc.body.appendChild(messageBox);\n\n\t\t// Attach the event handler to the message box\n\t\tmessageBox.addEventListener(\"tiddlyclip-save-file\", onSaveFile,false);\n\t};\n\tfunction onSaveFile(event) {\n\t\t//tiddlyclip.log(\"savefile at last!\");\n\t\t// Get the details from the message\n\t\tvar message = event.target;\n\t    var category = message.getAttribute(\"data-tiddlyclip-category\");\n\t    var pageData = message.getAttribute(\"data-tiddlyclip-pageData\");\n\t    var transformed =  JSON.parse(pageData);\n\t    if (!transformed.data) alert(\"not data\");\n\t    var currentsection = message.getAttribute(\"data-tiddlyclip-currentsection\");\t\t\t\t\t\n\t\tself.dispatchEvent({type: \"tiddlyclip-create\", category:category, pagedata: transformed, currentsection:currentsection});\t\n\t}\n};\n\n/*\nCompute the internal state of the widget\n*/\ntcWidget.prototype.execute = function() {\n\n};\n\n/*\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\n*/\ntcWidget.prototype.refresh = function(changedTiddlers) {\n\n\t\treturn false;\t\t\n\n};\n\nexports[\"tcadapter\"] = tcWidget;\n\n})();\n",
            "title": "$:/plugins/bj/tiddlyclip/tcadapter.js",
            "type": "application/javascript",
            "module-type": "widget"
        },
        "$:/plugins/bj/tiddlyclip/template": {
            "title": "$:/plugins/bj/tiddlyclip/template",
            "tags": "$:/tags/PageTemplate",
            "text": "<$createclip>\n<$tcadapter>\n</$createclip>\n</$tcadapter>\n\n"
        },
        "$:/plugins/bj/tiddlyclip/convert.js": {
            "type": "application/javascript",
            "title": "$:/plugins/bj/tiddlyclip/convert.js",
            "tags": "$:/tags/tiddlyclip",
            "module-type": "library",
            "text": "exports.name =\"htmlToTW2\";\nexports.run  = function(text)\n\t{\n\n\n\t\n\tvar toTW  =(function() {\n\t  var ELEMENT = this.Node?Node.ELEMENT_NODE:1,\n\t\t\t TEXT = this.Node?Node.TEXT_NODE:   3,\n\t\t\t CDATA= this.Node?Node.CDATA_SECTION_NODE:4,\n\t\t   COMMENT= this.Node?Node.COMMENT_NODE:  8;\n\t\n\t\tvar Tname = {\n\t\t//need to add a flag the says only add a \\n if not preceeded by \\n\n\t\t\n\t\t// -- table --\n\t\ttable   :[handleTabBg,handleTabEnd,''],//todo add handle end to add footer '\n\t\tthead\t:[handleTheadBg, \"\",\"\"],\n\t\ttbody\t:[handleTbodyBg, \"\",\"\"],\n\t\ttfoot\t:[handleTfootBg, \"\",\"\"],\n\t\ttr\t\t:[trStart,trEnd,''],\n\t\ttd\t\t:[tdStart,tdEnd,''],\n\t\tth\t\t:[tdStart,tdEnd,'th'],\n\n\t\t// -- heading --\n\n\t\th1:[\"\\newline!\"\t\t\t,\"\\n\",\"\"],\n\t\th2:[\"\\newline!!\"\t\t,\"\\n\",\"\"],\n\t\th3:[\"\\newline!!!\"\t\t,\"\\n\",\"\"],\n\t\th4:[\"\\newline!!!!\"\t\t,\"\\n\",\"\"],\n\t\th5:[\"\\newline!!!!!\"\t\t,\"\\n\",\"\"],\n\t\th6:[\"\\newline!!!!!!\"\t,\"\\n\",\"\"],\n\t\t\n\t\t// -- list --\n\t\tul\t\t:[\"\"\t\t\t,\"\\newline\",\"ul\"],\n\t\tol\t\t:[\"\"\t\t\t,\"\\newline\",\"ol\"],\n\t\tdl\t\t:[\"\"\t\t\t,\"\\newline\",\"dl\"],\n\t\tli\t\t:[handleBullit\t,\"\",\"li\"],\n\t\tdt\t\t:[handleBullit\t,\"\",\"dt\"],\n\t\tdd\t\t:[handleBullit\t,\"\",\"dd\"],\n\t\t\n\t\t// -- quoteByBlock --\t\t\n\t\t// -- quoteByLine --\n\t\tblockquote:[handlebq, \"\\newline\",\"bq\"],\n\t\t\n\t\t// -- rule --\n\t\t// -- monospacedByLine --\n\t\t// -- wikifyComment --\t\n\t\t// -- macro --\n\t\t// -- prettyLink --\n\t\t// -- wikiLink --\n\t\t// -- urlLink --\n\t\ta\t\t:[\"[[\"\t\t\t,handleLink,\"\"], \n\t\t\n\t\t// -- image --\n\t\timg\t\t:[handleImg, '',''],\n\t\t\n\t\t// -- html --\n\t\t// -- commentByBlock --\n\t\t// -- characterFormat --\n\t\tb      :[ \"''\",  \"''\" ,\"\"],\n\t\tstrong :[ \"''\",  \"''\" ,\"\"],\n\t\ti      :[ \"//\",  \"//\" ,\"\"],\n\t\tem     :[ \"//\",  \"//\" ,\"\"],\n\t\tu      :[ \"__\",  \"__\",\"\"],\n\t\tsub    :[ \"~~\",  \"~~\",\"\"],\n\t\tsup    :[ \"^^\",  \"^^\",\"\"],\n\t\tstrike :[ \"--\",  \"--\",\"\"],\n\t\t\n\t\t// -- customFormat --\n\t\tspan:[handleSPAN\t\t,endDIV,\"\"],\t\n\t\tdiv:[handleDIV\t\t\t,endDIV,\"\"],\t\n\t\t// -- mdash --\n\t\thr:[\"<hr>\"\t,\"\",\"\"],\t\t\n\t\t// -- lineBreak --\n\n\t\tbr\t\t:[handleBreak,\t\"\",\"\"],\n\t\t\n\t\t// -- rawText --\n\t\t// -- htmlEntitiesEncoding --\n\n\t\tcode   :[ \"{{{\",  \"}}}\",\"\"],\n\t\ttt     :[ \"{{{\",  \"}}}\",\"\"],\n\t\tpre   :[ \"\\newline{{{\\n\",  \"\\newline}}}\\n\",\"\"]\n\n\t\t}\t\n\t\tvar MAXCOL=20;\n\t\tvar spanDwCounters = new Array(MAXCOL);\n\t\tvar colCount =0;\t\n\t\tvar intable=false;\n\t\tvar foot,tofoot,head,footer;\n\t\tvar divStackEmpty =[];\n\t\t\t\t\n\t  return function tw(el, outer, LOCALE,parentbullit) {\n\t\t\tvar i = 0, j = el.childNodes, k='', m, n,\n\t\t\t\tl = j.length;\n\t\t\tvar nodeFound=false, ind, bullit = [];\n\t\t\tif (!parentbullit) parentbullit = [];\n\t\t\tfor (ind = 0; ind < parentbullit.length;ind++) bullit.push(parentbullit[ind]);\n\t\t\t\n\t\t\tif (outer) \n\t\t\t{\n\t\t\t\tm = el.nodeName.toLowerCase();\n\t\t\t\t\n\t\t\t\tfor (var name in Tname) {\n\n\t\t\t\t\tif (name === m) {\n\t\t\t\t\t\tk = typeof Tname[name][0] == \"function\"?\n\t\t\t\t\t\t\t\tTname[name][0](el, outer, LOCALE,parentbullit):Tname[name][0];\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t//alert( \"m=\"+m+\" \"+k);\n\t\t\t\t\t\tbullit.push(Tname[name][2]);//pass on tag to child for bulit list\n\t\t\t\t\t\tnodeFound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar temp='';\n\t\t\twhile(i !== l) switch((n = j[i++]).nodeType) {\n\n\t\t\t  case ELEMENT: temp +=tw(n, true, LOCALE,bullit); break;\n\t\t\t  case TEXT:    temp += doTrim(m,n.nodeValue); break;\n\t\t\t  case COMMENT: temp += \"/% \" +n.nodeValue +\" %/\";break;\n\t\t\t  \n\n\t\t\t} \n\t\t\tif (tofoot===true) footer += temp; else k += temp;\n\t\t\t\n\t\t\tvar kk='blank';\n\t\t\tif (!outer) return trimNl(k);\n\t\t\tfor (var name in Tname) {\n\t\t\t\tif (name === m) {\n\t\t\t\t\tkk = (typeof Tname[name][1] == \"function\"?\n\t\t\t\t\t\t\t\tTname[name][1](el, outer, LOCALE):Tname[name][1]);\n\t\t\t\t\t//return (k+Tname[name][1]);\n\t\t\t\t\t//alert ('kk '+kk);\n\t\t\t\t\treturn k+kk;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn k;\n\t\t}; \n\t\tfunction attr(el,LOCALE) {\n\t\t\tvar i = 0, j = el.attributes, k = new Array(l = j.length), l, nm,v;\n\t\t\twhile(i !== l) {\n\t\t\t\tnm = j[i].nodeName ;\n\t\t\t\tv = j[i].value;\n\t\t\t\tk[i]='';\n\t\t\t\t//check to see if src is local, add path if it is \n\t\t\t\tif ((nm==='src')||(nm==='href')){\n\t\t\t\t\tvar pathStart = v.substring(0,4);\n\t\t\t\t\t\n\t\t\t\t\tif ((pathStart==='file') ||(pathStart === 'http'))\n\t\t\t\t\t\tk[i] +=nm + '=\"'+ v + '\"'; \n\t\t\t\t\telse {\n\t\t\t\t\t\tif (nm==='src') {\n\t\t\t\t\t\t\tif (!!LOCALE) {\n\t\t\t\t\t\t\t\tvar locale = LOCALE.split('//');\n\t\t\t\t\t\t\t\tlocale = locale[0]+'//'+locale[1].split('/')[0];\n\t\t\t\t\t\t\t\tk[i] +=nm +  '=\"'+ locale+v + '\"';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse k[i] +=nm +  '=\"'+v + '\"';\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tk[i] +=nm +  '=\"'+ LOCALE+v + '\"';\t\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tk[i] +=nm + '=\"'+ v +'\"';\n\t\t\t\t//alert(nm+\" =\"+v);\n\t\t\t\ti++;\n\t\t\t}\n\t\t\treturn (l?\" \":\"\") + k.join(\" \");\n\t  }\n\t\t  \n\t\tfunction handleSPAN(el, outer, LOCALE,parentbullit,bullitstack) {\n\t\t\tvar k = '{{\"', style = '';\n\t\t\tvar attrlist = attr(el,LOCALE);\n\t\t\tvar empty = true;\n\t\t\tfor (var i= 0;i< attrlist.length;i++) { \n\t\t\t\titem = attrlist[i].split(':');\n\n\t\t\t\tif (item[0] ==='style'){\n\t\t\t\t\tk +=attrlist[i].substring(6,attrlist[i].length-1).replace(/\"/g,\"'\")+\";\";\n\t\t\t\t   empty = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tdivStackEmpty.push(empty);\n\t\t\tif (empty === true) return '';\n\t\t\treturn k+'\"{\\newline';\n\t\t}\n\n\t\tfunction handleDIV(el, outer, LOCALE,parentbullit,bullitstack) {\n\t\t\tvar k = '{{\"', align = 'left',style = '';\n\t\t\tvar attrlist = attr(el,LOCALE);\n\t\t\tvar empty = true;\n\t\t\tfor (var i= 0;i< attrlist.length;i++) { \n\t\t\t\titem = attrlist[i].split(':');\n\t\t\t\tif (item[0] ==='align'){ \n\t\t\t\t\tk +='align:'+item[1]+\";\";\n\t\t\t\t\tempty = false;\n\t\t\t\t}\n\t\t\t\telse if (item[0] ==='style') {\n\t\t\t\t\tk +=attrlist[i].substring(6,attrlist[i].length-1).replace(/\"/g,\"'\")+\";\";\n\t\t\t\t\tempty = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tdivStackEmpty.push(empty);\n\t\t\tif (empty === true) return '';\n\t\t\treturn k+'\"{\\newline';\n\t\t}\n\t\tfunction endDIV() {\n\t\t\tif (divStackEmpty.pop() === true) return \"\";\n\t\t\treturn '}}}';\n\t\t}\t\n\t\tfunction doTrim(name, content) {\n\t\t\tvar whiteSpace = /^\\s+|\\s+$/g;\n\t\t\tif (name!=='pre') return content.replace(whiteSpace, ' ');\n\t\t\treturn content;\n\t\t}\n\t   function trimNl(k)\n\t   {\n\t\t   return k.replace (/(\\newline)+/g,\"\\newline\").replace (/\\n\\newline/g,\"\\n\").\n\t\t\t\t\treplace(/\\newline/g,\"\\n\").          replace(/\\n.*?\\trim\\|/g,\"\\n|\").\n\t\t\t\t\treplace(/\\|([h,f])\\trim.*?\\n/g,\"|$1\\n\").     replace(/\\trim/g,\"\");//replace(/\\trim/g,\"\\n\");tiddler\tfunction\n\t\t  }\n\t\tfunction trimNewLines(k,term) { \n\t\t\tif ((term.length >6) &&(term.substring(0,7) === '\\newline')) {\n\t\t\t\ttt = term.substring(7,term.length);\n\t\t\t\tif ((k.length > 1) &&(k.substring(k.length-1,k.length)==='\\n')) return k + tt;\n\t\t\t\telse return (k + '\\n' + tt);\n\t\t\t}\n\t\t\treturn k + term;\n\t\t}\n\t\t\n\t\tfunction handleBreak (el, outer, LOCALE,parentbullit,bullitstack) \t{\n\t\t\tif (intable === true) return '<<br>>';\n\t\t\treturn \"\\n\";\n\t\t}\n\t\t\n\t\tfunction handleBullit(el, outer, LOCALE,parentbullit,bullitstack) {\n\t\t\tvar bullit;// = parentbullit[parentbullit.length-1];\n\t\t\tfor (var i =0 ; i < parentbullit.length; i++) {\n\t\t\t\tbullit = parentbullit[parentbullit.length-1-i];\n\t\t\t\tif ((bullit === 'dl')||(bullit === 'ul')||(bullit === 'ol')) break;\n\t\t\t}\n\t\t\t//if (i === parentbullit.length) alert (\"error\");\n\n\t\t\tif ((this[2] ==='dt')&&(bullit === 'dl')){ return '\\newline'+handleBullitList(parentbullit)+';';}\n\t\t\tif (bullit === 'ul') { return '\\newline'+handleBullitList(parentbullit,parentbullit.length-1-i) +'*';}\n\t\t\tif (bullit === 'ol') { return '\\newline'+handleBullitList(parentbullit,parentbullit.length-1-i)+'#';}\n\t\t\tif (bullit === 'dl') { return '\\newline'+handleBullitList(parentbullit,parentbullit.length-1-i)+':';}\n\t\t\treturn '';\n\t\t}\n\n\n\t\tfunction handleBullitList(parentbullit,end) {\n\t\t\tif (parentbullit.length < 1) return;\n\t\t\t\n\t\t\tvar bullitInner = parentbullit[end-1];\n\t\t\tfor (var i =end-1 ; i>-1; i--) {\n\t\t\t\tbullitInner = parentbullit[i];\n\t\t\t\tif ((bullitInner === 'dt')||(bullitInner === 'li')||(bullitInner === 'dd')) break;\n\t\t\t}\n\t\t\tif (i === end) { alert (\"error\"); return;}\n\t\t\tend = i;\n\t\t\tvar bullitOuter = parentbullit[end-1];\n\t\t\tfor (var i =end-1 ; i>-1; i--) {\n\t\t\t\tbullitOuter = parentbullit[i];\n\t\t\t\tif ((bullitOuter === 'dl')||(bullitOuter === 'ul')||(bullitOuter === 'ol')) break;\n\t\t\t}\n\t\t\tif (i === end) { alert (\"error\"); return;}\n\t\t\t//parentbullit=parentbullit.substring(0,parentbullit.length-4);\n\t\t\t\n\t\t\tif ((bullitInner ==='dt')&&(bullitOuter === 'dl')){ return handleBullitList(parentbullit,i)+';';}\n\t\t\tif (bullitOuter === 'ul') { return handleBullitList(parentbullit,i)+'*';}\n\t\t\tif (bullitOuter === 'ol') { return handleBullitList(parentbullit,i)+'#';}\n\t\t\tif (bullitOuter === 'dl') { return handleBullitList(parentbullit,i)+':';}\n\t\t\treturn '';\n\t\t}\n\t\tfunction handleLink (el, outer, LOCALE) {\n\t\t\treturn  '|' +el.getAttribute(\"href\") +']]';\n\t\t}\n\t\tfunction handlebq (el, outer, LOCALE,parentbullit,bullitstack)\t{\n\t\t\tvar bullit;// = parentbullit[parentbullit.length-1];\n\t\t\tvar outline = '\\newline>';\n\t\t\tfor (var i =parentbullit.length-1 ; i >-1; i--) {\n\t\t\t\tbullit = parentbullit[i];\n\t\t\t\tif (bullit === 'bq') outline += '>';\n\t\t\t}\n\n\t\t\treturn outline;\n\t\t}\n\n\n\t\tfunction handleTabBg (el, outer, LOCALE,parentbullit,bullitstack) {\n\t\t\tfor (var i = 0; i < MAXCOL; i++) spanDwCounters[i]=0;\n\t\t\tfoot = false;\n\t\t\ttofoot = false;\n\t\t\thead = false;\n\t\t\tfooter = '';\n\t\t\treturn '';\n\t\t}\n\t\tfunction handleTheadBg() {\n\t\t\thead = true; //flag to put header char on each of row\n\t\t\treturn '';\n\t\t}\n\t\tfunction handleTbodyBg() {\n\t\t\ttofoot=false;\n\t\t\thead = false;\n\t\t\treturn '';\n\t\t}\n\t\tfunction handleTfootBg() {\n\t\t\tfoot = true; //flag to put foot char on each of row\n\t\t\ttofoot =true;//when footer html is before body save to temp area then append\n\t\t\treturn '';\n\t\t}\n\t\tfunction handleTabEnd(){\n\t\t\tif (foot===true)\n\t\t\treturn footer + \"f\\newline\"; //move footer to end of table\n\t\t\telse return '\\newline';\n\t\t\treturn '';\n\t\t}\n\t\tfunction trStart (el, outer, LOCALE,parentbullit,bullitstack) {\n\t\t\tcolCount =0;\n\t\t\tif (tofoot===true) footer+='\\newline'; else  return '\\newline';\n\t\t\treturn '';\n\t\t}\n\t\tfunction trEnd (){\n\t\t    if (tofoot===true) { footer+='|f\\trim';return '';}\n\t\t    if (head===true) return  '|h\\trim';\n\t\t    return '|\\trim';\n\t\t}\n\t\tfunction tdStart (el, outer, LOCALE,parentbullit,bullitstack) {\n\t\t\tvar k ='|';\n\t\t\tintable = true; //<br> are converted to <<br>> not newline due to tw formatting\n\t\t\tif (colCount === 0) k='\\trim|';\n\t\t\tif \t(spanDwCounters[colCount] >1) {\n\t\t\t\tk +='~|';\n\t\t\t\tspanDwCounters[colCount]--;\n\t\t\t} else\n\t\t\t\tif (this[2]==='th') k +='!';\n\t\t\tvar rowspan =  parseInt( el.getAttribute('rowspan'))|| 1;\n\t\t\tspanDwCounters[colCount]= rowspan;\n\t\t\t\n\t\t\tvar colspan =  parseInt(el.getAttribute('colspan') )|| 1;\n\t\t\t//alert(\"colspan \"+colspan);\n\t\t\tfor (var i = 0; i<colspan-1; i++) k+='>|';\n\t\t\t\n\t\t\tvar align = el.getAttribute('align') || 'none';\n\t\t\tvar style = el.getAttribute('style') || '';\n\t\t\tif (style === 'text-align: center;') align = 'center';\n\t\t\tif (style ==='text-align: right;')   align = 'right' ;\n\t\t\tif ((align ==='center')||(align ==='right')) k+=' ';\n\t\t\tif (tofoot===true)footer+=k; else return k;\n\t\t\treturn '';\n\t\t}\n\t\t\n\t\tfunction tdEnd (el, outer, LOCALE,parentbullit,bullitstack) {\n\t\t\tcolCount +=1;\n\t\t\tintable = false;\n\t\t\tvar align =  el.getAttribute('align') || 'none';\n\t\t\tvar style = el.getAttribute('style') || '';\n\t\t\tif (style === 'text-align: center;') align = 'center';\n\t\t\tif (style ==='text-align: left;')   align = 'left' ;\n\n\t\t\tif (align ==='center') if (tofoot===true)footer+=' ';else return ' ';\t\n\t\t\tif (align ==='left') if (tofoot===true)footer+=' '; else return ' ';\n\t\t\tif (tofoot===true)footer+='';else return '';\n\t\t\treturn '';\n\t\t\t//if (tofoot===true) alert (footer);\n\t\t}\n\n\t\tfunction handleImg(el, outer, LOCALE,parentbullit,bullitstack) {\n\t\t\tvar img = el.getAttribute('src');\n\t\t\tif (!img) return '';\n\n\t\t\tvar pathStart = img.substring(0,4);\n\n\t\t\tif ((pathStart!=='file') && (pathStart !== 'http'))\n\t\t\t{\n\t\t\t\tvar locale = LOCALE.split('//');\n\t\t\t\tlocale = locale[0]+'//'+locale[1].split('/')[0];\n\t\t\t\timg= locale+img;\t\n\t\t\t}\t\n\t\t\tvar alt = el.getAttribute('alt');\n\t\t\tvar align = el.getAttribute('align');\n\t\t\tvar title = el.getAttribute('title');\n\n\t\t\tvar ret = \"[\";\n\t\t\tif (align === 'left') ret += \"<\" ;\n\t\t\tif (align === 'right') ret += \">\" ;\n\t\t\tret += \"img[\";\n\t\t\tif (title) ret += \"$title|\" \n\t\t\tret += (img+\"]]\");\n\t\t\treturn ret;\n\t\t}\n\t})(); \n\t\tvar content = \"<html><body>\" + text + \"</body></html>\";\n\t\t// Create the iframe\n\t\tvar iframe = document.createElement(\"iframe\");\n\t\tiframe.style.display = \"none\";\n\t\tdocument.body.appendChild(iframe);\n\t\tvar doc = iframe.document;\n\t\tif(iframe.contentDocument)\n\t\t\tdoc = iframe.contentDocument; \n\t\telse if(iframe.contentWindow)\n\t\t\tdoc = iframe.contentWindow.document; \n\t\t// Put the content in the iframe\n\t\tdoc.open();\n\t\tdoc.writeln(content);\n\t\tdoc.close();\n\t\t// convert to tiddlytext\n\t\tvar twcontent = toTW(doc.body);\n\t\tiframe.parentNode.removeChild(iframe);\n\t\treturn twcontent;\n}\n///end convert///\n"
        },
        "$:/plugins/bj/tiddlyclip/sublink.js": {
            "type": "application/javascript",
            "title": "$:/plugins/bj/tiddlyclip/sublink.js",
            "tags": "$:/tags/tiddlyclip",
            "module-type": "library",
            "text": "exports.name =\"sublink\";\nexports.run  = function(link,global) {\n\tvar here = (this.document.location.toString().split(\"#\")[0]).replace(/(.*)\\/.*?$/,\"$1\");\n\tvar  pos = -1;\n\tpos = link.indexOf(here);\n\tif (!global && pos === 0) return \"./\" + link.substr(here.length+1);\n\treturn link;\n}\n\n"
        },
        "$:/plugins/bj/tiddlyclip/multitid.js": {
            "type": "application/javascript",
            "title": "$:/plugins/bj/tiddlyclip/multitid.js",
            "tags": "$:/tags/tiddlyclip",
            "module-type": "library",
            "text": "exports.name =\"tomultid\";\nexports.run  = function(IMPORT_TITLE,tiddler)\n\t{\n\n\tvar tiddlers = [tiddler];\n\n\t// Get the current $:/Import tiddler\n\tvar importTiddler = $tw.wiki.getTiddler(IMPORT_TITLE),\n\t\timportData = $tw.wiki.getTiddlerData(IMPORT_TITLE,{}),\n\t\tnewFields = new Object({\n\t\t\ttitle: IMPORT_TITLE,\n\t\t\ttype: \"application/json\",\n\t\t\t\"multitid-type\": \"vault\"\n\t\t}),\n\t\tincomingTiddlers = [];\n\t// Process each tiddler\n\timportData.tiddlers = importData.tiddlers || {};\n\t$tw.utils.each(tiddlers,function(tiddlerFields) {\n\t\tvar title = tiddlerFields.title;\n\t\tif(title) {\n\t\t\tincomingTiddlers.push(title);\n\t\t\timportData.tiddlers[title] = tiddlerFields;\n\t\t}\n\t});\n\n\t// Save the $:/Import tiddler\n\tnewFields.text = JSON.stringify(importData,null,$tw.config.preferences.jsonSpaces);\n\t$tw.wiki.addTiddler(new $tw.Tiddler(importTiddler,newFields));\n\t// Update the story and history details\n\n\treturn \"saved\";\n};\n\n\n"
        }
    }
}